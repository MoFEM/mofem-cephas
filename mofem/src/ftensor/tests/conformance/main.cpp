#include <iostream>
#include "../../src/FTensor.hpp"
using namespace FTensor;
using namespace std;

#include "test_T0.hpp"
#include "test_T1.hpp"
#include "test_T2.hpp"
#include "test_T2s.hpp"
#include "test_T2as.hpp"
#include "test_T3.hpp"
#include "test_T3dg.hpp"
#include "test_T3ch.hpp"
#include "test_T3as.hpp"
#include "test_T4.hpp"
#include "test_T4ddg.hpp"
#include "test_T4R.hpp"
#include "test_Levi_Civita.hpp"

int main()
{
  double t01(12), t02(14);

  Tensor0<double *> t0_1(&t01), t0_2(&t02);
  Tensor1<double, 3> t1_1(1, 2, 3), t1_2(4, 5, 6), t1_3(7, 8, 9);
  Tensor2<double, 3, 3> t2_1(10, 20, 30, 40, 50, 60, 70, 80, 90),
    t2_2(11, 21, 31, 41, 51, 61, 71, 81, 91),
    t2_3(12, 22, 32, 42, 52, 62, 72, 82, 92);
  Tensor2_symmetric<double, 3> t2s_1(13, 23, 33, 43, 53, 63),
    t2s_2(14, 24, 34, 44, 54, 64), t2s_3(15, 25, 35, 45, 55, 65);
  Tensor3<double, 3, 3, 3> t3_1(333, 334, 335, 336, 337, 338, 339, 340, 341,
                                433, 434, 435, 436, 437, 438, 439, 440, 441,
                                533, 534, 535, 536, 537, 538, 539, 540, 541);
  Dg<double, 3, 3> t3dg_1(101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
                          111, 112, 113, 114, 115, 116, 117, 118),
    t3dg_2(201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213,
           214, 215, 216, 217, 218),
    t3dg_3(301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313,
           314, 315, 316, 317, 318);
  Christof<double, 3, 3> t3ch_1(401, 402, 403, 404, 405, 406, 407, 408, 409,
                                410, 411, 412, 413, 414, 415, 416, 417, 418),
    t3ch_2(501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513,
           514, 515, 516, 517, 518),
    t3ch_3(601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613,
           614, 615, 616, 617, 618);
  Tensor3_antisymmetric<double, 3, 3> t3as_1(701, 702, 703, 704, 705, 706, 707,
                                             708, 709),
    t3as_2(801, 802, 803, 804, 805, 806, 807, 808, 809),
    t3as_3(901, 902, 903, 904, 905, 906, 907, 908, 909);

  Tensor4<double, 3, 3, 3, 3> t4_1(
    1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012,
    1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024,
    1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036,
    1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048,
    1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060,
    1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072,
    1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081),
    t4_2(1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111,
         1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122,
         1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133,
         1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144,
         1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155,
         1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166,
         1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177,
         1178, 1179, 1180, 1181);

  test_T0(13, t0_1, t0_2);
  test_T1(t1_1, t1_2);
  test_T2(t1_1, t1_2, t2_1, t2_2, t2_3);
  test_T2s(t1_1, t1_2, t2_1, t2_2, t2s_1, t2s_2, t2s_3);
  test_T2as();
  test_T3(t1_1, t1_2, t2_2, t2_3, t2s_2, t2s_3, t3_1, t3dg_2);
  test_T3dg(t1_1, t1_2, t2_1, t2_2, t2s_1, t2s_2, t2s_3, t3dg_1, t3dg_2,
            t3dg_3);
  test_T3ch(13, t0_1, t0_2, t1_1, t1_2, t2_1, t2_2, t2_3, t2s_1, t2s_2, t2s_3,
            t3dg_1, t3dg_2, t3dg_3, t3ch_1, t3ch_2, t3ch_3);
  test_T3as(t1_2, t2_2, t3dg_1, t3dg_2, t3as_1, t3as_2, t3as_3);
  test_T4ddg(t1_1, t1_2, t2_1, t2_2, t2_3, t2s_1, t2s_2, t2s_3, t3dg_1, t3dg_2,
             t3dg_3);
  test_T4R();
  test_T4(t4_1, t4_2);
  test_Levi_Civita();
}
