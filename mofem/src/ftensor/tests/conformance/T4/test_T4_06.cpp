#include "../../../src/FTensor.hpp"
#include "../test_for_zero.hpp"
#include <iostream>
using namespace FTensor;
using namespace std;

void test_T4_06(const Tensor4<double, 1, 2, 3, 4> &t4,
                const Tensor3<double, 2, 3, 4> &t3_2)
{
  Index<'i', 1> i;
  Index<'j', 2> j;
  Index<'k', 3> k;
  Index<'l', 4> l;

  for(int ii = 0; ii < 1; ++ii)
    {
      test_for_zero((t4(i, j, k, l) * t3_2(j, k, l))(ii)
                      - (t4(ii, 0, 0, 0) * t3_2(0, 0, 0)
                         + t4(ii, 0, 0, 1) * t3_2(0, 0, 1)
                         + t4(ii, 0, 0, 2) * t3_2(0, 0, 2)
                         + t4(ii, 0, 0, 3) * t3_2(0, 0, 3)
                         + t4(ii, 0, 1, 0) * t3_2(0, 1, 0)
                         + t4(ii, 0, 1, 1) * t3_2(0, 1, 1)
                         + t4(ii, 0, 1, 2) * t3_2(0, 1, 2)
                         + t4(ii, 0, 1, 3) * t3_2(0, 1, 3)
                         + t4(ii, 0, 2, 0) * t3_2(0, 2, 0)
                         + t4(ii, 0, 2, 1) * t3_2(0, 2, 1)
                         + t4(ii, 0, 2, 2) * t3_2(0, 2, 2)
                         + t4(ii, 0, 2, 3) * t3_2(0, 2, 3)
                         + t4(ii, 1, 0, 0) * t3_2(1, 0, 0)
                         + t4(ii, 1, 0, 1) * t3_2(1, 0, 1)
                         + t4(ii, 1, 0, 2) * t3_2(1, 0, 2)
                         + t4(ii, 1, 0, 3) * t3_2(1, 0, 3)
                         + t4(ii, 1, 1, 0) * t3_2(1, 1, 0)
                         + t4(ii, 1, 1, 1) * t3_2(1, 1, 1)
                         + t4(ii, 1, 1, 2) * t3_2(1, 1, 2)
                         + t4(ii, 1, 1, 3) * t3_2(1, 1, 3)
                         + t4(ii, 1, 2, 0) * t3_2(1, 2, 0)
                         + t4(ii, 1, 2, 1) * t3_2(1, 2, 1)
                         + t4(ii, 1, 2, 2) * t3_2(1, 2, 2)
                         + t4(ii, 1, 2, 3) * t3_2(1, 2, 3)),
                    "T4(i,j,k,l)*T3(j,k,l)(" + std::to_string(ii) + ")");
      test_for_zero((t3_2(j, k, l) * t4(i, j, k, l))(ii)
                      - (t4(ii, 0, 0, 0) * t3_2(0, 0, 0)
                         + t4(ii, 0, 0, 1) * t3_2(0, 0, 1)
                         + t4(ii, 0, 0, 2) * t3_2(0, 0, 2)
                         + t4(ii, 0, 0, 3) * t3_2(0, 0, 3)
                         + t4(ii, 0, 1, 0) * t3_2(0, 1, 0)
                         + t4(ii, 0, 1, 1) * t3_2(0, 1, 1)
                         + t4(ii, 0, 1, 2) * t3_2(0, 1, 2)
                         + t4(ii, 0, 1, 3) * t3_2(0, 1, 3)
                         + t4(ii, 0, 2, 0) * t3_2(0, 2, 0)
                         + t4(ii, 0, 2, 1) * t3_2(0, 2, 1)
                         + t4(ii, 0, 2, 2) * t3_2(0, 2, 2)
                         + t4(ii, 0, 2, 3) * t3_2(0, 2, 3)
                         + t4(ii, 1, 0, 0) * t3_2(1, 0, 0)
                         + t4(ii, 1, 0, 1) * t3_2(1, 0, 1)
                         + t4(ii, 1, 0, 2) * t3_2(1, 0, 2)
                         + t4(ii, 1, 0, 3) * t3_2(1, 0, 3)
                         + t4(ii, 1, 1, 0) * t3_2(1, 1, 0)
                         + t4(ii, 1, 1, 1) * t3_2(1, 1, 1)
                         + t4(ii, 1, 1, 2) * t3_2(1, 1, 2)
                         + t4(ii, 1, 1, 3) * t3_2(1, 1, 3)
                         + t4(ii, 1, 2, 0) * t3_2(1, 2, 0)
                         + t4(ii, 1, 2, 1) * t3_2(1, 2, 1)
                         + t4(ii, 1, 2, 2) * t3_2(1, 2, 2)
                         + t4(ii, 1, 2, 3) * t3_2(1, 2, 3)),
                    "T3(j,k,l)*T4(i,j,k,l)(" + std::to_string(ii) + ")");
    }
  {
    Tensor3<double, 2, 4, 3> t3;
    t3(j, l, k) = t3_2(j, k, l);

    for(int ii = 0; ii < 1; ++ii)
      {
        test_for_zero(
          (t4(i, j, k, l) * t3(j, l, k))(ii)
            - (t4(ii, 0, 0, 0) * t3(0, 0, 0) + t4(ii, 0, 0, 1) * t3(0, 1, 0)
               + t4(ii, 0, 0, 2) * t3(0, 2, 0) + t4(ii, 0, 0, 3) * t3(0, 3, 0)
               + t4(ii, 0, 1, 0) * t3(0, 0, 1) + t4(ii, 0, 1, 1) * t3(0, 1, 1)
               + t4(ii, 0, 1, 2) * t3(0, 2, 1) + t4(ii, 0, 1, 3) * t3(0, 3, 1)
               + t4(ii, 0, 2, 0) * t3(0, 0, 2) + t4(ii, 0, 2, 1) * t3(0, 1, 2)
               + t4(ii, 0, 2, 2) * t3(0, 2, 2) + t4(ii, 0, 2, 3) * t3(0, 3, 2)
               + t4(ii, 1, 0, 0) * t3(1, 0, 0) + t4(ii, 1, 0, 1) * t3(1, 1, 0)
               + t4(ii, 1, 0, 2) * t3(1, 2, 0) + t4(ii, 1, 0, 3) * t3(1, 3, 0)
               + t4(ii, 1, 1, 0) * t3(1, 0, 1) + t4(ii, 1, 1, 1) * t3(1, 1, 1)
               + t4(ii, 1, 1, 2) * t3(1, 2, 1) + t4(ii, 1, 1, 3) * t3(1, 3, 1)
               + t4(ii, 1, 2, 0) * t3(1, 0, 2) + t4(ii, 1, 2, 1) * t3(1, 1, 2)
               + t4(ii, 1, 2, 2) * t3(1, 2, 2)
               + t4(ii, 1, 2, 3) * t3(1, 3, 2)),
          "T4(i,j,k,l)*T3(j,l,k)(" + std::to_string(ii) + ")");
        test_for_zero(
          (t3(j, l, k) * t4(i, j, k, l))(ii)
            - (t4(ii, 0, 0, 0) * t3(0, 0, 0) + t4(ii, 0, 0, 1) * t3(0, 1, 0)
               + t4(ii, 0, 0, 2) * t3(0, 2, 0) + t4(ii, 0, 0, 3) * t3(0, 3, 0)
               + t4(ii, 0, 1, 0) * t3(0, 0, 1) + t4(ii, 0, 1, 1) * t3(0, 1, 1)
               + t4(ii, 0, 1, 2) * t3(0, 2, 1) + t4(ii, 0, 1, 3) * t3(0, 3, 1)
               + t4(ii, 0, 2, 0) * t3(0, 0, 2) + t4(ii, 0, 2, 1) * t3(0, 1, 2)
               + t4(ii, 0, 2, 2) * t3(0, 2, 2) + t4(ii, 0, 2, 3) * t3(0, 3, 2)
               + t4(ii, 1, 0, 0) * t3(1, 0, 0) + t4(ii, 1, 0, 1) * t3(1, 1, 0)
               + t4(ii, 1, 0, 2) * t3(1, 2, 0) + t4(ii, 1, 0, 3) * t3(1, 3, 0)
               + t4(ii, 1, 1, 0) * t3(1, 0, 1) + t4(ii, 1, 1, 1) * t3(1, 1, 1)
               + t4(ii, 1, 1, 2) * t3(1, 2, 1) + t4(ii, 1, 1, 3) * t3(1, 3, 1)
               + t4(ii, 1, 2, 0) * t3(1, 0, 2) + t4(ii, 1, 2, 1) * t3(1, 1, 2)
               + t4(ii, 1, 2, 2) * t3(1, 2, 2)
               + t4(ii, 1, 2, 3) * t3(1, 3, 2)),
          "T3(j,l,k)*T4(i,j,k,l)(" + std::to_string(ii) + ")");
      }
  }
  {
    Tensor3<double, 3, 2, 4> t3;
    t3(k, j, l) = t3_2(j, k, l);

    for(int ii = 0; ii < 1; ++ii)
      {
        test_for_zero(
          (t4(i, j, k, l) * t3(k, j, l))(ii)
            - (t4(ii, 0, 0, 0) * t3(0, 0, 0) + t4(ii, 0, 0, 1) * t3(0, 0, 1)
               + t4(ii, 0, 0, 2) * t3(0, 0, 2) + t4(ii, 0, 0, 3) * t3(0, 0, 3)
               + t4(ii, 0, 1, 0) * t3(1, 0, 0) + t4(ii, 0, 1, 1) * t3(1, 0, 1)
               + t4(ii, 0, 1, 2) * t3(1, 0, 2) + t4(ii, 0, 1, 3) * t3(1, 0, 3)
               + t4(ii, 0, 2, 0) * t3(2, 0, 0) + t4(ii, 0, 2, 1) * t3(2, 0, 1)
               + t4(ii, 0, 2, 2) * t3(2, 0, 2) + t4(ii, 0, 2, 3) * t3(2, 0, 3)
               + t4(ii, 1, 0, 0) * t3(0, 1, 0) + t4(ii, 1, 0, 1) * t3(0, 1, 1)
               + t4(ii, 1, 0, 2) * t3(0, 1, 2) + t4(ii, 1, 0, 3) * t3(0, 1, 3)
               + t4(ii, 1, 1, 0) * t3(1, 1, 0) + t4(ii, 1, 1, 1) * t3(1, 1, 1)
               + t4(ii, 1, 1, 2) * t3(1, 1, 2) + t4(ii, 1, 1, 3) * t3(1, 1, 3)
               + t4(ii, 1, 2, 0) * t3(2, 1, 0) + t4(ii, 1, 2, 1) * t3(2, 1, 1)
               + t4(ii, 1, 2, 2) * t3(2, 1, 2)
               + t4(ii, 1, 2, 3) * t3(2, 1, 3)),
          "T4(i,j,k,l)*T3(k,j,l)(" + std::to_string(ii) + ")");
        test_for_zero(
          (t3(k, j, l) * t4(i, j, k, l))(ii)
            - (t4(ii, 0, 0, 0) * t3(0, 0, 0) + t4(ii, 0, 0, 1) * t3(0, 0, 1)
               + t4(ii, 0, 0, 2) * t3(0, 0, 2) + t4(ii, 0, 0, 3) * t3(0, 0, 3)
               + t4(ii, 0, 1, 0) * t3(1, 0, 0) + t4(ii, 0, 1, 1) * t3(1, 0, 1)
               + t4(ii, 0, 1, 2) * t3(1, 0, 2) + t4(ii, 0, 1, 3) * t3(1, 0, 3)
               + t4(ii, 0, 2, 0) * t3(2, 0, 0) + t4(ii, 0, 2, 1) * t3(2, 0, 1)
               + t4(ii, 0, 2, 2) * t3(2, 0, 2) + t4(ii, 0, 2, 3) * t3(2, 0, 3)
               + t4(ii, 1, 0, 0) * t3(0, 1, 0) + t4(ii, 1, 0, 1) * t3(0, 1, 1)
               + t4(ii, 1, 0, 2) * t3(0, 1, 2) + t4(ii, 1, 0, 3) * t3(0, 1, 3)
               + t4(ii, 1, 1, 0) * t3(1, 1, 0) + t4(ii, 1, 1, 1) * t3(1, 1, 1)
               + t4(ii, 1, 1, 2) * t3(1, 1, 2) + t4(ii, 1, 1, 3) * t3(1, 1, 3)
               + t4(ii, 1, 2, 0) * t3(2, 1, 0) + t4(ii, 1, 2, 1) * t3(2, 1, 1)
               + t4(ii, 1, 2, 2) * t3(2, 1, 2)
               + t4(ii, 1, 2, 3) * t3(2, 1, 3)),
          "T3(k,j,l)*T4(i,j,k,l)(" + std::to_string(ii) + ")");
      }
  }
  {
    Tensor3<double, 3, 4, 2> t3;
    t3(k, l, j) = t3_2(j, k, l);
    for(int ii = 0; ii < 1; ++ii)
      {
        test_for_zero(
          (t4(i, j, k, l) * t3(k, l, j))(ii)
            - (t4(ii, 0, 0, 0) * t3(0, 0, 0) + t4(ii, 0, 0, 1) * t3(0, 1, 0)
               + t4(ii, 0, 0, 2) * t3(0, 2, 0) + t4(ii, 0, 0, 3) * t3(0, 3, 0)
               + t4(ii, 0, 1, 0) * t3(1, 0, 0) + t4(ii, 0, 1, 1) * t3(1, 1, 0)
               + t4(ii, 0, 1, 2) * t3(1, 2, 0) + t4(ii, 0, 1, 3) * t3(1, 3, 0)
               + t4(ii, 0, 2, 0) * t3(2, 0, 0) + t4(ii, 0, 2, 1) * t3(2, 1, 0)
               + t4(ii, 0, 2, 2) * t3(2, 2, 0) + t4(ii, 0, 2, 3) * t3(2, 3, 0)
               + t4(ii, 1, 0, 0) * t3(0, 0, 1) + t4(ii, 1, 0, 1) * t3(0, 1, 1)
               + t4(ii, 1, 0, 2) * t3(0, 2, 1) + t4(ii, 1, 0, 3) * t3(0, 3, 1)
               + t4(ii, 1, 1, 0) * t3(1, 0, 1) + t4(ii, 1, 1, 1) * t3(1, 1, 1)
               + t4(ii, 1, 1, 2) * t3(1, 2, 1) + t4(ii, 1, 1, 3) * t3(1, 3, 1)
               + t4(ii, 1, 2, 0) * t3(2, 0, 1) + t4(ii, 1, 2, 1) * t3(2, 1, 1)
               + t4(ii, 1, 2, 2) * t3(2, 2, 1)
               + t4(ii, 1, 2, 3) * t3(2, 3, 1)),
          "T4(i,j,k,l)*T3(k,l,j)(" + std::to_string(ii) + ")");
        test_for_zero(
          (t3(k, l, j) * t4(i, j, k, l))(ii)
            - (t4(ii, 0, 0, 0) * t3(0, 0, 0) + t4(ii, 0, 0, 1) * t3(0, 1, 0)
               + t4(ii, 0, 0, 2) * t3(0, 2, 0) + t4(ii, 0, 0, 3) * t3(0, 3, 0)
               + t4(ii, 0, 1, 0) * t3(1, 0, 0) + t4(ii, 0, 1, 1) * t3(1, 1, 0)
               + t4(ii, 0, 1, 2) * t3(1, 2, 0) + t4(ii, 0, 1, 3) * t3(1, 3, 0)
               + t4(ii, 0, 2, 0) * t3(2, 0, 0) + t4(ii, 0, 2, 1) * t3(2, 1, 0)
               + t4(ii, 0, 2, 2) * t3(2, 2, 0) + t4(ii, 0, 2, 3) * t3(2, 3, 0)
               + t4(ii, 1, 0, 0) * t3(0, 0, 1) + t4(ii, 1, 0, 1) * t3(0, 1, 1)
               + t4(ii, 1, 0, 2) * t3(0, 2, 1) + t4(ii, 1, 0, 3) * t3(0, 3, 1)
               + t4(ii, 1, 1, 0) * t3(1, 0, 1) + t4(ii, 1, 1, 1) * t3(1, 1, 1)
               + t4(ii, 1, 1, 2) * t3(1, 2, 1) + t4(ii, 1, 1, 3) * t3(1, 3, 1)
               + t4(ii, 1, 2, 0) * t3(2, 0, 1) + t4(ii, 1, 2, 1) * t3(2, 1, 1)
               + t4(ii, 1, 2, 2) * t3(2, 2, 1)
               + t4(ii, 1, 2, 3) * t3(2, 3, 1)),
          "T3(k,l,j)*T4(i,j,k,l)(" + std::to_string(ii) + ")");
      }
  }
  {
    Tensor3<double, 4, 2, 3> t3;
    t3(l, j, k) = t3_2(j, k, l);
    for(int ii = 0; ii < 1; ++ii)
      {
        test_for_zero(
          (t4(i, j, k, l) * t3(l, j, k))(ii)
            - (t4(ii, 0, 0, 0) * t3(0, 0, 0) + t4(ii, 0, 0, 1) * t3(1, 0, 0)
               + t4(ii, 0, 0, 2) * t3(2, 0, 0) + t4(ii, 0, 0, 3) * t3(3, 0, 0)
               + t4(ii, 0, 1, 0) * t3(0, 0, 1) + t4(ii, 0, 1, 1) * t3(1, 0, 1)
               + t4(ii, 0, 1, 2) * t3(2, 0, 1) + t4(ii, 0, 1, 3) * t3(3, 0, 1)
               + t4(ii, 0, 2, 0) * t3(0, 0, 2) + t4(ii, 0, 2, 1) * t3(1, 0, 2)
               + t4(ii, 0, 2, 2) * t3(2, 0, 2) + t4(ii, 0, 2, 3) * t3(3, 0, 2)
               + t4(ii, 1, 0, 0) * t3(0, 1, 0) + t4(ii, 1, 0, 1) * t3(1, 1, 0)
               + t4(ii, 1, 0, 2) * t3(2, 1, 0) + t4(ii, 1, 0, 3) * t3(3, 1, 0)
               + t4(ii, 1, 1, 0) * t3(0, 1, 1) + t4(ii, 1, 1, 1) * t3(1, 1, 1)
               + t4(ii, 1, 1, 2) * t3(2, 1, 1) + t4(ii, 1, 1, 3) * t3(3, 1, 1)
               + t4(ii, 1, 2, 0) * t3(0, 1, 2) + t4(ii, 1, 2, 1) * t3(1, 1, 2)
               + t4(ii, 1, 2, 2) * t3(2, 1, 2)
               + t4(ii, 1, 2, 3) * t3(3, 1, 2)),
          "T4(i,j,k,l)*T3(l,j,k)(" + std::to_string(ii) + ")");
        test_for_zero(
          (t3(l, j, k) * t4(i, j, k, l))(ii)
            - (t4(ii, 0, 0, 0) * t3(0, 0, 0) + t4(ii, 0, 0, 1) * t3(1, 0, 0)
               + t4(ii, 0, 0, 2) * t3(2, 0, 0) + t4(ii, 0, 0, 3) * t3(3, 0, 0)
               + t4(ii, 0, 1, 0) * t3(0, 0, 1) + t4(ii, 0, 1, 1) * t3(1, 0, 1)
               + t4(ii, 0, 1, 2) * t3(2, 0, 1) + t4(ii, 0, 1, 3) * t3(3, 0, 1)
               + t4(ii, 0, 2, 0) * t3(0, 0, 2) + t4(ii, 0, 2, 1) * t3(1, 0, 2)
               + t4(ii, 0, 2, 2) * t3(2, 0, 2) + t4(ii, 0, 2, 3) * t3(3, 0, 2)
               + t4(ii, 1, 0, 0) * t3(0, 1, 0) + t4(ii, 1, 0, 1) * t3(1, 1, 0)
               + t4(ii, 1, 0, 2) * t3(2, 1, 0) + t4(ii, 1, 0, 3) * t3(3, 1, 0)
               + t4(ii, 1, 1, 0) * t3(0, 1, 1) + t4(ii, 1, 1, 1) * t3(1, 1, 1)
               + t4(ii, 1, 1, 2) * t3(2, 1, 1) + t4(ii, 1, 1, 3) * t3(3, 1, 1)
               + t4(ii, 1, 2, 0) * t3(0, 1, 2) + t4(ii, 1, 2, 1) * t3(1, 1, 2)
               + t4(ii, 1, 2, 2) * t3(2, 1, 2)
               + t4(ii, 1, 2, 3) * t3(3, 1, 2)),
          "T3(l,j,k)*T4(i,j,k,l)(" + std::to_string(ii) + ")");
      }
  }
  {
    Tensor3<double, 4, 3, 2> t3;
    t3(l, k, j) = t3_2(j, k, l);

    for(int ii = 0; ii < 1; ++ii)
      {
        test_for_zero(
          (t4(i, j, k, l) * t3(l, k, j))(ii)
            - (t4(ii, 0, 0, 0) * t3(0, 0, 0) + t4(ii, 0, 0, 1) * t3(1, 0, 0)
               + t4(ii, 0, 0, 2) * t3(2, 0, 0) + t4(ii, 0, 0, 3) * t3(3, 0, 0)
               + t4(ii, 0, 1, 0) * t3(0, 1, 0) + t4(ii, 0, 1, 1) * t3(1, 1, 0)
               + t4(ii, 0, 1, 2) * t3(2, 1, 0) + t4(ii, 0, 1, 3) * t3(3, 1, 0)
               + t4(ii, 0, 2, 0) * t3(0, 2, 0) + t4(ii, 0, 2, 1) * t3(1, 2, 0)
               + t4(ii, 0, 2, 2) * t3(2, 2, 0) + t4(ii, 0, 2, 3) * t3(3, 2, 0)
               + t4(ii, 1, 0, 0) * t3(0, 0, 1) + t4(ii, 1, 0, 1) * t3(1, 0, 1)
               + t4(ii, 1, 0, 2) * t3(2, 0, 1) + t4(ii, 1, 0, 3) * t3(3, 0, 1)
               + t4(ii, 1, 1, 0) * t3(0, 1, 1) + t4(ii, 1, 1, 1) * t3(1, 1, 1)
               + t4(ii, 1, 1, 2) * t3(2, 1, 1) + t4(ii, 1, 1, 3) * t3(3, 1, 1)
               + t4(ii, 1, 2, 0) * t3(0, 2, 1) + t4(ii, 1, 2, 1) * t3(1, 2, 1)
               + t4(ii, 1, 2, 2) * t3(2, 2, 1)
               + t4(ii, 1, 2, 3) * t3(3, 2, 1)),
          "T4(i,j,k,l)*T3(l,k,j)(" + std::to_string(ii) + ")");
        test_for_zero(
          (t3(l, k, j) * t4(i, j, k, l))(ii)
            - (t4(ii, 0, 0, 0) * t3(0, 0, 0) + t4(ii, 0, 0, 1) * t3(1, 0, 0)
               + t4(ii, 0, 0, 2) * t3(2, 0, 0) + t4(ii, 0, 0, 3) * t3(3, 0, 0)
               + t4(ii, 0, 1, 0) * t3(0, 1, 0) + t4(ii, 0, 1, 1) * t3(1, 1, 0)
               + t4(ii, 0, 1, 2) * t3(2, 1, 0) + t4(ii, 0, 1, 3) * t3(3, 1, 0)
               + t4(ii, 0, 2, 0) * t3(0, 2, 0) + t4(ii, 0, 2, 1) * t3(1, 2, 0)
               + t4(ii, 0, 2, 2) * t3(2, 2, 0) + t4(ii, 0, 2, 3) * t3(3, 2, 0)
               + t4(ii, 1, 0, 0) * t3(0, 0, 1) + t4(ii, 1, 0, 1) * t3(1, 0, 1)
               + t4(ii, 1, 0, 2) * t3(2, 0, 1) + t4(ii, 1, 0, 3) * t3(3, 0, 1)
               + t4(ii, 1, 1, 0) * t3(0, 1, 1) + t4(ii, 1, 1, 1) * t3(1, 1, 1)
               + t4(ii, 1, 1, 2) * t3(2, 1, 1) + t4(ii, 1, 1, 3) * t3(3, 1, 1)
               + t4(ii, 1, 2, 0) * t3(0, 2, 1) + t4(ii, 1, 2, 1) * t3(1, 2, 1)
               + t4(ii, 1, 2, 2) * t3(2, 2, 1)
               + t4(ii, 1, 2, 3) * t3(3, 2, 1)),
          "T3(l,k,j)*T4(i,j,k,l)(" + std::to_string(ii) + ")");
      }
  }

  for(int jj = 0; jj < 2; ++jj)
    {
      test_for_zero((t4(i, j, k, l) * t3_2(i, k, l))(jj)
                      - (t4(0, jj, 0, 0) * t3_2(0, 0, 0)
                         + t4(0, jj, 0, 1) * t3_2(0, 0, 1)
                         + t4(0, jj, 0, 2) * t3_2(0, 0, 2)
                         + t4(0, jj, 0, 3) * t3_2(0, 0, 3)
                         + t4(0, jj, 1, 0) * t3_2(0, 1, 0)
                         + t4(0, jj, 1, 1) * t3_2(0, 1, 1)
                         + t4(0, jj, 1, 2) * t3_2(0, 1, 2)
                         + t4(0, jj, 1, 3) * t3_2(0, 1, 3)
                         + t4(0, jj, 2, 0) * t3_2(0, 2, 0)
                         + t4(0, jj, 2, 1) * t3_2(0, 2, 1)
                         + t4(0, jj, 2, 2) * t3_2(0, 2, 2)
                         + t4(0, jj, 2, 3) * t3_2(0, 2, 3)),
                    "T4(i,j,k,l)*T3(i,k,l)(" + std::to_string(jj) + ")");
      test_for_zero((t3_2(i, k, l) * t4(i, j, k, l))(jj)
                      - (t4(0, jj, 0, 0) * t3_2(0, 0, 0)
                         + t4(0, jj, 0, 1) * t3_2(0, 0, 1)
                         + t4(0, jj, 0, 2) * t3_2(0, 0, 2)
                         + t4(0, jj, 0, 3) * t3_2(0, 0, 3)
                         + t4(0, jj, 1, 0) * t3_2(0, 1, 0)
                         + t4(0, jj, 1, 1) * t3_2(0, 1, 1)
                         + t4(0, jj, 1, 2) * t3_2(0, 1, 2)
                         + t4(0, jj, 1, 3) * t3_2(0, 1, 3)
                         + t4(0, jj, 2, 0) * t3_2(0, 2, 0)
                         + t4(0, jj, 2, 1) * t3_2(0, 2, 1)
                         + t4(0, jj, 2, 2) * t3_2(0, 2, 2)
                         + t4(0, jj, 2, 3) * t3_2(0, 2, 3)),
                    "T3(i,k,l)*T4(i,j,k,l)(" + std::to_string(jj) + ")");
    }
  {
    Tensor3<double, 2, 4, 3> t3;
    t3(j, l, k) = t3_2(j, k, l);

    for(int jj = 0; jj < 2; ++jj)
      {
        test_for_zero(
          (t4(i, j, k, l) * t3(i, l, k))(jj)
            - (t4(0, jj, 0, 0) * t3(0, 0, 0) + t4(0, jj, 0, 1) * t3(0, 1, 0)
               + t4(0, jj, 0, 2) * t3(0, 2, 0) + t4(0, jj, 0, 3) * t3(0, 3, 0)
               + t4(0, jj, 1, 0) * t3(0, 0, 1) + t4(0, jj, 1, 1) * t3(0, 1, 1)
               + t4(0, jj, 1, 2) * t3(0, 2, 1) + t4(0, jj, 1, 3) * t3(0, 3, 1)
               + t4(0, jj, 2, 0) * t3(0, 0, 2) + t4(0, jj, 2, 1) * t3(0, 1, 2)
               + t4(0, jj, 2, 2) * t3(0, 2, 2)
               + t4(0, jj, 2, 3) * t3(0, 3, 2)),
          "T4(i,j,k,l)*T3(i,l,k)(" + std::to_string(jj) + ")");
        test_for_zero(
          (t3(i, l, k) * t4(i, j, k, l))(jj)
            - (t4(0, jj, 0, 0) * t3(0, 0, 0) + t4(0, jj, 0, 1) * t3(0, 1, 0)
               + t4(0, jj, 0, 2) * t3(0, 2, 0) + t4(0, jj, 0, 3) * t3(0, 3, 0)
               + t4(0, jj, 1, 0) * t3(0, 0, 1) + t4(0, jj, 1, 1) * t3(0, 1, 1)
               + t4(0, jj, 1, 2) * t3(0, 2, 1) + t4(0, jj, 1, 3) * t3(0, 3, 1)
               + t4(0, jj, 2, 0) * t3(0, 0, 2) + t4(0, jj, 2, 1) * t3(0, 1, 2)
               + t4(0, jj, 2, 2) * t3(0, 2, 2)
               + t4(0, jj, 2, 3) * t3(0, 3, 2)),
          "T3(i,l,k)*T4(i,j,k,l)(" + std::to_string(jj) + ")");
      }
  }
  {
    Tensor3<double, 3, 2, 4> t3;
    t3(k, j, l) = t3_2(j, k, l);

    for(int jj = 0; jj < 2; ++jj)
      {
        test_for_zero(
          (t4(i, j, k, l) * t3(k, i, l))(jj)
            - (t4(0, jj, 0, 0) * t3(0, 0, 0) + t4(0, jj, 0, 1) * t3(0, 0, 1)
               + t4(0, jj, 0, 2) * t3(0, 0, 2) + t4(0, jj, 0, 3) * t3(0, 0, 3)
               + t4(0, jj, 1, 0) * t3(1, 0, 0) + t4(0, jj, 1, 1) * t3(1, 0, 1)
               + t4(0, jj, 1, 2) * t3(1, 0, 2) + t4(0, jj, 1, 3) * t3(1, 0, 3)
               + t4(0, jj, 2, 0) * t3(2, 0, 0) + t4(0, jj, 2, 1) * t3(2, 0, 1)
               + t4(0, jj, 2, 2) * t3(2, 0, 2)
               + t4(0, jj, 2, 3) * t3(2, 0, 3)),
          "T4(i,j,k,l)*T3(k,i,l)(" + std::to_string(jj) + ")");
        test_for_zero(
          (t3(k, i, l) * t4(i, j, k, l))(jj)
            - (t4(0, jj, 0, 0) * t3(0, 0, 0) + t4(0, jj, 0, 1) * t3(0, 0, 1)
               + t4(0, jj, 0, 2) * t3(0, 0, 2) + t4(0, jj, 0, 3) * t3(0, 0, 3)
               + t4(0, jj, 1, 0) * t3(1, 0, 0) + t4(0, jj, 1, 1) * t3(1, 0, 1)
               + t4(0, jj, 1, 2) * t3(1, 0, 2) + t4(0, jj, 1, 3) * t3(1, 0, 3)
               + t4(0, jj, 2, 0) * t3(2, 0, 0) + t4(0, jj, 2, 1) * t3(2, 0, 1)
               + t4(0, jj, 2, 2) * t3(2, 0, 2)
               + t4(0, jj, 2, 3) * t3(2, 0, 3)),
          "T3(k,i,l)*T4(i,j,k,l)(" + std::to_string(jj) + ")");
      }
  }
  {
    Tensor3<double, 3, 4, 2> t3;
    t3(k, l, j) = t3_2(j, k, l);
    for(int jj = 0; jj < 2; ++jj)
      {
        test_for_zero(
          (t4(i, j, k, l) * t3(k, l, i))(jj)
            - (t4(0, jj, 0, 0) * t3(0, 0, 0) + t4(0, jj, 0, 1) * t3(0, 1, 0)
               + t4(0, jj, 0, 2) * t3(0, 2, 0) + t4(0, jj, 0, 3) * t3(0, 3, 0)
               + t4(0, jj, 1, 0) * t3(1, 0, 0) + t4(0, jj, 1, 1) * t3(1, 1, 0)
               + t4(0, jj, 1, 2) * t3(1, 2, 0) + t4(0, jj, 1, 3) * t3(1, 3, 0)
               + t4(0, jj, 2, 0) * t3(2, 0, 0) + t4(0, jj, 2, 1) * t3(2, 1, 0)
               + t4(0, jj, 2, 2) * t3(2, 2, 0)
               + t4(0, jj, 2, 3) * t3(2, 3, 0)),
          "T4(i,j,k,l)*T3(k,l,i)(" + std::to_string(jj) + ")");
        test_for_zero(
          (t3(k, l, i) * t4(i, j, k, l))(jj)
            - (t4(0, jj, 0, 0) * t3(0, 0, 0) + t4(0, jj, 0, 1) * t3(0, 1, 0)
               + t4(0, jj, 0, 2) * t3(0, 2, 0) + t4(0, jj, 0, 3) * t3(0, 3, 0)
               + t4(0, jj, 1, 0) * t3(1, 0, 0) + t4(0, jj, 1, 1) * t3(1, 1, 0)
               + t4(0, jj, 1, 2) * t3(1, 2, 0) + t4(0, jj, 1, 3) * t3(1, 3, 0)
               + t4(0, jj, 2, 0) * t3(2, 0, 0) + t4(0, jj, 2, 1) * t3(2, 1, 0)
               + t4(0, jj, 2, 2) * t3(2, 2, 0)
               + t4(0, jj, 2, 3) * t3(2, 3, 0)),
          "T3(k,l,i)*T4(i,j,k,l)(" + std::to_string(jj) + ")");
      }
  }
  {
    Tensor3<double, 4, 2, 3> t3;
    t3(l, j, k) = t3_2(j, k, l);
    for(int jj = 0; jj < 2; ++jj)
      {
        test_for_zero(
          (t4(i, j, k, l) * t3(l, i, k))(jj)
            - (t4(0, jj, 0, 0) * t3(0, 0, 0) + t4(0, jj, 0, 1) * t3(1, 0, 0)
               + t4(0, jj, 0, 2) * t3(2, 0, 0) + t4(0, jj, 0, 3) * t3(3, 0, 0)
               + t4(0, jj, 1, 0) * t3(0, 0, 1) + t4(0, jj, 1, 1) * t3(1, 0, 1)
               + t4(0, jj, 1, 2) * t3(2, 0, 1) + t4(0, jj, 1, 3) * t3(3, 0, 1)
               + t4(0, jj, 2, 0) * t3(0, 0, 2) + t4(0, jj, 2, 1) * t3(1, 0, 2)
               + t4(0, jj, 2, 2) * t3(2, 0, 2)
               + t4(0, jj, 2, 3) * t3(3, 0, 2)),
          "T4(i,j,k,l)*T3(l,i,k)(" + std::to_string(jj) + ")");
        test_for_zero(
          (t3(l, i, k) * t4(i, j, k, l))(jj)
            - (t4(0, jj, 0, 0) * t3(0, 0, 0) + t4(0, jj, 0, 1) * t3(1, 0, 0)
               + t4(0, jj, 0, 2) * t3(2, 0, 0) + t4(0, jj, 0, 3) * t3(3, 0, 0)
               + t4(0, jj, 1, 0) * t3(0, 0, 1) + t4(0, jj, 1, 1) * t3(1, 0, 1)
               + t4(0, jj, 1, 2) * t3(2, 0, 1) + t4(0, jj, 1, 3) * t3(3, 0, 1)
               + t4(0, jj, 2, 0) * t3(0, 0, 2) + t4(0, jj, 2, 1) * t3(1, 0, 2)
               + t4(0, jj, 2, 2) * t3(2, 0, 2)
               + t4(0, jj, 2, 3) * t3(3, 0, 2)),
          "T3(l,i,k)*T4(i,j,k,l)(" + std::to_string(jj) + ")");
      }
  }
  {
    Tensor3<double, 4, 3, 2> t3;
    t3(l, k, j) = t3_2(j, k, l);

    for(int jj = 0; jj < 2; ++jj)
      {
        test_for_zero(
          (t4(i, j, k, l) * t3(l, k, i))(jj)
            - (t4(0, jj, 0, 0) * t3(0, 0, 0) + t4(0, jj, 0, 1) * t3(1, 0, 0)
               + t4(0, jj, 0, 2) * t3(2, 0, 0) + t4(0, jj, 0, 3) * t3(3, 0, 0)
               + t4(0, jj, 1, 0) * t3(0, 1, 0) + t4(0, jj, 1, 1) * t3(1, 1, 0)
               + t4(0, jj, 1, 2) * t3(2, 1, 0) + t4(0, jj, 1, 3) * t3(3, 1, 0)
               + t4(0, jj, 2, 0) * t3(0, 2, 0) + t4(0, jj, 2, 1) * t3(1, 2, 0)
               + t4(0, jj, 2, 2) * t3(2, 2, 0)
               + t4(0, jj, 2, 3) * t3(3, 2, 0)),
          "T4(i,j,k,l)*T3(l,k,i)(" + std::to_string(jj) + ")");
        test_for_zero(
          (t3(l, k, i) * t4(i, j, k, l))(jj)
            - (t4(0, jj, 0, 0) * t3(0, 0, 0) + t4(0, jj, 0, 1) * t3(1, 0, 0)
               + t4(0, jj, 0, 2) * t3(2, 0, 0) + t4(0, jj, 0, 3) * t3(3, 0, 0)
               + t4(0, jj, 1, 0) * t3(0, 1, 0) + t4(0, jj, 1, 1) * t3(1, 1, 0)
               + t4(0, jj, 1, 2) * t3(2, 1, 0) + t4(0, jj, 1, 3) * t3(3, 1, 0)
               + t4(0, jj, 2, 0) * t3(0, 2, 0) + t4(0, jj, 2, 1) * t3(1, 2, 0)
               + t4(0, jj, 2, 2) * t3(2, 2, 0)
               + t4(0, jj, 2, 3) * t3(3, 2, 0)),
          "T3(l,k,i)*T4(i,j,k,l)(" + std::to_string(jj) + ")");
      }
  }

  for(int kk = 0; kk < 3; ++kk)
    {
      test_for_zero((t4(i, j, k, l) * t3_2(i, j, l))(kk)
                      - (t4(0, 0, kk, 0) * t3_2(0, 0, 0)
                         + t4(0, 0, kk, 1) * t3_2(0, 0, 1)
                         + t4(0, 0, kk, 2) * t3_2(0, 0, 2)
                         + t4(0, 0, kk, 3) * t3_2(0, 0, 3)
                         + t4(0, 1, kk, 0) * t3_2(0, 1, 0)
                         + t4(0, 1, kk, 1) * t3_2(0, 1, 1)
                         + t4(0, 1, kk, 2) * t3_2(0, 1, 2)
                         + t4(0, 1, kk, 3) * t3_2(0, 1, 3)),
                    "T4(i,j,k,l)*T3(i,j,l)(" + std::to_string(kk) + ")");
      test_for_zero((t3_2(i, j, l) * t4(i, j, k, l))(kk)
                      - (t4(0, 0, kk, 0) * t3_2(0, 0, 0)
                         + t4(0, 0, kk, 1) * t3_2(0, 0, 1)
                         + t4(0, 0, kk, 2) * t3_2(0, 0, 2)
                         + t4(0, 0, kk, 3) * t3_2(0, 0, 3)
                         + t4(0, 1, kk, 0) * t3_2(0, 1, 0)
                         + t4(0, 1, kk, 1) * t3_2(0, 1, 1)
                         + t4(0, 1, kk, 2) * t3_2(0, 1, 2)
                         + t4(0, 1, kk, 3) * t3_2(0, 1, 3)),
                    "T3(i,j,l)*T4(i,j,k,l)(" + std::to_string(kk) + ")");
    }
  {
    Tensor3<double, 2, 4, 3> t3;
    t3(j, l, k) = t3_2(j, k, l);

    for(int kk = 0; kk < 3; ++kk)
      {
        test_for_zero(
          (t4(i, j, k, l) * t3(i, l, j))(kk)
            - (t4(0, 0, kk, 0) * t3(0, 0, 0) + t4(0, 0, kk, 1) * t3(0, 1, 0)
               + t4(0, 0, kk, 2) * t3(0, 2, 0) + t4(0, 0, kk, 3) * t3(0, 3, 0)
               + t4(0, 1, kk, 0) * t3(0, 0, 1) + t4(0, 1, kk, 1) * t3(0, 1, 1)
               + t4(0, 1, kk, 2) * t3(0, 2, 1)
               + t4(0, 1, kk, 3) * t3(0, 3, 1)),
          "T4(i,j,k,l)*T3(i,l,j)(" + std::to_string(kk) + ")");
        test_for_zero(
          (t3(i, l, j) * t4(i, j, k, l))(kk)
            - (t4(0, 0, kk, 0) * t3(0, 0, 0) + t4(0, 0, kk, 1) * t3(0, 1, 0)
               + t4(0, 0, kk, 2) * t3(0, 2, 0) + t4(0, 0, kk, 3) * t3(0, 3, 0)
               + t4(0, 1, kk, 0) * t3(0, 0, 1) + t4(0, 1, kk, 1) * t3(0, 1, 1)
               + t4(0, 1, kk, 2) * t3(0, 2, 1)
               + t4(0, 1, kk, 3) * t3(0, 3, 1)),
          "T3(i,l,j)*T4(i,j,k,l)(" + std::to_string(kk) + ")");
      }
  }
  {
    Tensor3<double, 3, 2, 4> t3;
    t3(k, j, l) = t3_2(j, k, l);

    for(int kk = 0; kk < 3; ++kk)
      {
        test_for_zero(
          (t4(i, j, k, l) * t3(j, i, l))(kk)
            - (t4(0, 0, kk, 0) * t3(0, 0, 0) + t4(0, 0, kk, 1) * t3(0, 0, 1)
               + t4(0, 0, kk, 2) * t3(0, 0, 2) + t4(0, 0, kk, 3) * t3(0, 0, 3)
               + t4(0, 1, kk, 0) * t3(1, 0, 0) + t4(0, 1, kk, 1) * t3(1, 0, 1)
               + t4(0, 1, kk, 2) * t3(1, 0, 2)
               + t4(0, 1, kk, 3) * t3(1, 0, 3)),
          "T4(i,j,k,l)*T3(j,i,l)(" + std::to_string(kk) + ")");
        test_for_zero(
          (t3(j, i, l) * t4(i, j, k, l))(kk)
            - (t4(0, 0, kk, 0) * t3(0, 0, 0) + t4(0, 0, kk, 1) * t3(0, 0, 1)
               + t4(0, 0, kk, 2) * t3(0, 0, 2) + t4(0, 0, kk, 3) * t3(0, 0, 3)
               + t4(0, 1, kk, 0) * t3(1, 0, 0) + t4(0, 1, kk, 1) * t3(1, 0, 1)
               + t4(0, 1, kk, 2) * t3(1, 0, 2)
               + t4(0, 1, kk, 3) * t3(1, 0, 3)),
          "T3(j,i,l)*T4(i,j,k,l)(" + std::to_string(kk) + ")");
      }
  }
  {
    Tensor3<double, 3, 4, 2> t3;
    t3(k, l, j) = t3_2(j, k, l);
    for(int kk = 0; kk < 3; ++kk)
      {
        test_for_zero(
          (t4(i, j, k, l) * t3(j, l, i))(kk)
            - (t4(0, 0, kk, 0) * t3(0, 0, 0) + t4(0, 0, kk, 1) * t3(0, 1, 0)
               + t4(0, 0, kk, 2) * t3(0, 2, 0) + t4(0, 0, kk, 3) * t3(0, 3, 0)
               + t4(0, 1, kk, 0) * t3(1, 0, 0) + t4(0, 1, kk, 1) * t3(1, 1, 0)
               + t4(0, 1, kk, 2) * t3(1, 2, 0)
               + t4(0, 1, kk, 3) * t3(1, 3, 0)),
          "T4(i,j,k,l)*T3(j,l,i)(" + std::to_string(kk) + ")");
        test_for_zero(
          (t3(j, l, i) * t4(i, j, k, l))(kk)
            - (t4(0, 0, kk, 0) * t3(0, 0, 0) + t4(0, 0, kk, 1) * t3(0, 1, 0)
               + t4(0, 0, kk, 2) * t3(0, 2, 0) + t4(0, 0, kk, 3) * t3(0, 3, 0)
               + t4(0, 1, kk, 0) * t3(1, 0, 0) + t4(0, 1, kk, 1) * t3(1, 1, 0)
               + t4(0, 1, kk, 2) * t3(1, 2, 0)
               + t4(0, 1, kk, 3) * t3(1, 3, 0)),
          "T3(j,l,i)*T4(i,j,k,l)(" + std::to_string(kk) + ")");
      }
  }
  {
    Tensor3<double, 4, 2, 3> t3;
    t3(l, j, k) = t3_2(j, k, l);
    for(int kk = 0; kk < 3; ++kk)
      {
        test_for_zero(
          (t4(i, j, k, l) * t3(l, i, j))(kk)
            - (t4(0, 0, kk, 0) * t3(0, 0, 0) + t4(0, 0, kk, 1) * t3(1, 0, 0)
               + t4(0, 0, kk, 2) * t3(2, 0, 0) + t4(0, 0, kk, 3) * t3(3, 0, 0)
               + t4(0, 1, kk, 0) * t3(0, 0, 1) + t4(0, 1, kk, 1) * t3(1, 0, 1)
               + t4(0, 1, kk, 2) * t3(2, 0, 1)
               + t4(0, 1, kk, 3) * t3(3, 0, 1)),
          "T4(i,j,k,l)*T3(l,i,j)(" + std::to_string(kk) + ")");
        test_for_zero(
          (t3(l, i, j) * t4(i, j, k, l))(kk)
            - (t4(0, 0, kk, 0) * t3(0, 0, 0) + t4(0, 0, kk, 1) * t3(1, 0, 0)
               + t4(0, 0, kk, 2) * t3(2, 0, 0) + t4(0, 0, kk, 3) * t3(3, 0, 0)
               + t4(0, 1, kk, 0) * t3(0, 0, 1) + t4(0, 1, kk, 1) * t3(1, 0, 1)
               + t4(0, 1, kk, 2) * t3(2, 0, 1)
               + t4(0, 1, kk, 3) * t3(3, 0, 1)),
          "T3(l,i,j)*T4(i,j,k,l)(" + std::to_string(kk) + ")");
      }
  }
  {
    Tensor3<double, 4, 3, 2> t3;
    t3(l, k, j) = t3_2(j, k, l);

    for(int kk = 0; kk < 3; ++kk)
      {
        test_for_zero(
          (t4(i, j, k, l) * t3(l, j, i))(kk)
            - (t4(0, 0, kk, 0) * t3(0, 0, 0) + t4(0, 0, kk, 1) * t3(1, 0, 0)
               + t4(0, 0, kk, 2) * t3(2, 0, 0) + t4(0, 0, kk, 3) * t3(3, 0, 0)
               + t4(0, 1, kk, 0) * t3(0, 1, 0) + t4(0, 1, kk, 1) * t3(1, 1, 0)
               + t4(0, 1, kk, 2) * t3(2, 1, 0)
               + t4(0, 1, kk, 3) * t3(3, 1, 0)),
          "T4(i,j,k,l)*T3(l,j,i)(" + std::to_string(kk) + ")");
        test_for_zero(
          (t3(l, j, i) * t4(i, j, k, l))(kk)
            - (t4(0, 0, kk, 0) * t3(0, 0, 0) + t4(0, 0, kk, 1) * t3(1, 0, 0)
               + t4(0, 0, kk, 2) * t3(2, 0, 0) + t4(0, 0, kk, 3) * t3(3, 0, 0)
               + t4(0, 1, kk, 0) * t3(0, 1, 0) + t4(0, 1, kk, 1) * t3(1, 1, 0)
               + t4(0, 1, kk, 2) * t3(2, 1, 0)
               + t4(0, 1, kk, 3) * t3(3, 1, 0)),
          "T3(l,j,i)*T4(i,j,k,l)(" + std::to_string(kk) + ")");
      }
  }



  for(int ll = 0; ll < 4; ++ll)
    {
      test_for_zero((t4(i, j, k, l) * t3_2(i, j, k))(ll)
                      - (t4(0, 0, 0, ll) * t3_2(0, 0, 0)
                         + t4(0, 0, 1, ll) * t3_2(0, 0, 1)
                         + t4(0, 0, 2, ll) * t3_2(0, 0, 2)
                         + t4(0, 1, 0, ll) * t3_2(0, 1, 0)
                         + t4(0, 1, 1, ll) * t3_2(0, 1, 1)
                         + t4(0, 1, 2, ll) * t3_2(0, 1, 2)),
                    "T4(i,j,k,l)*T3(i,j,k)(" + std::to_string(ll) + ")");
      test_for_zero((t3_2(i, j, k) * t4(i, j, k, l))(ll)
                      - (t4(0, 0, 0, ll) * t3_2(0, 0, 0)
                         + t4(0, 0, 1, ll) * t3_2(0, 0, 1)
                         + t4(0, 0, 2, ll) * t3_2(0, 0, 2)
                         + t4(0, 1, 0, ll) * t3_2(0, 1, 0)
                         + t4(0, 1, 1, ll) * t3_2(0, 1, 1)
                         + t4(0, 1, 2, ll) * t3_2(0, 1, 2)),
                    "T3(i,j,k)*T4(i,j,k,l)(" + std::to_string(ll) + ")");
    }
  {
    Tensor3<double, 2, 4, 3> t3;
    t3(j, l, k) = t3_2(j, k, l);

    for(int ll = 0; ll < 4; ++ll)
      {
        test_for_zero(
          (t4(i, j, k, l) * t3(i, k, j))(ll)
            - (t4(0, 0, 0, ll) * t3(0, 0, 0) + t4(0, 0, 1, ll) * t3(0, 1, 0)
               + t4(0, 0, 2, ll) * t3(0, 2, 0) + t4(0, 1, 0, ll) * t3(0, 0, 1)
               + t4(0, 1, 1, ll) * t3(0, 1, 1)
               + t4(0, 1, 2, ll) * t3(0, 2, 1)),
          "T4(i,j,k,l)*T3(i,k,j)(" + std::to_string(ll) + ")");
        test_for_zero(
          (t3(i, k, j) * t4(i, j, k, l))(ll)
            - (t4(0, 0, 0, ll) * t3(0, 0, 0) + t4(0, 0, 1, ll) * t3(0, 1, 0)
               + t4(0, 0, 2, ll) * t3(0, 2, 0) + t4(0, 1, 0, ll) * t3(0, 0, 1)
               + t4(0, 1, 1, ll) * t3(0, 1, 1)
               + t4(0, 1, 2, ll) * t3(0, 2, 1)),
          "T3(i,k,j)*T4(i,j,k,l)(" + std::to_string(ll) + ")");
      }
  }
  {
    Tensor3<double, 3, 2, 4> t3;
    t3(k, j, l) = t3_2(j, k, l);

    for(int ll = 0; ll < 4; ++ll)
      {
        test_for_zero(
          (t4(i, j, k, l) * t3(j, i, k))(ll)
            - (t4(0, 0, 0, ll) * t3(0, 0, 0) + t4(0, 0, 1, ll) * t3(0, 0, 1)
               + t4(0, 0, 2, ll) * t3(0, 0, 2) + t4(0, 1, 0, ll) * t3(1, 0, 0)
               + t4(0, 1, 1, ll) * t3(1, 0, 1)
               + t4(0, 1, 2, ll) * t3(1, 0, 2)),
          "T4(i,j,k,l)*T3(j,i,k)(" + std::to_string(ll) + ")");
        test_for_zero(
          (t3(j, i, k) * t4(i, j, k, l))(ll)
            - (t4(0, 0, 0, ll) * t3(0, 0, 0) + t4(0, 0, 1, ll) * t3(0, 0, 1)
               + t4(0, 0, 2, ll) * t3(0, 0, 2) + t4(0, 1, 0, ll) * t3(1, 0, 0)
               + t4(0, 1, 1, ll) * t3(1, 0, 1)
               + t4(0, 1, 2, ll) * t3(1, 0, 2)),
          "T3(j,i,k)*T4(i,j,k,l)(" + std::to_string(ll) + ")");
      }
  }
  {
    Tensor3<double, 3, 4, 2> t3;
    t3(k, l, j) = t3_2(j, k, l);
    for(int ll = 0; ll < 4; ++ll)
      {
        test_for_zero(
          (t4(i, j, k, l) * t3(j, k, i))(ll)
            - (t4(0, 0, 0, ll) * t3(0, 0, 0) + t4(0, 0, 1, ll) * t3(0, 1, 0)
               + t4(0, 0, 2, ll) * t3(0, 2, 0) + t4(0, 1, 0, ll) * t3(1, 0, 0)
               + t4(0, 1, 1, ll) * t3(1, 1, 0)
               + t4(0, 1, 2, ll) * t3(1, 2, 0)),
          "T4(i,j,k,l)*T3(j,k,i)(" + std::to_string(ll) + ")");
        test_for_zero(
          (t3(j, k, i) * t4(i, j, k, l))(ll)
            - (t4(0, 0, 0, ll) * t3(0, 0, 0) + t4(0, 0, 1, ll) * t3(0, 1, 0)
               + t4(0, 0, 2, ll) * t3(0, 2, 0) + t4(0, 1, 0, ll) * t3(1, 0, 0)
               + t4(0, 1, 1, ll) * t3(1, 1, 0)
               + t4(0, 1, 2, ll) * t3(1, 2, 0)),
          "T3(j,k,i)*T4(i,j,k,l)(" + std::to_string(ll) + ")");
      }
  }
  {
    Tensor3<double, 4, 2, 3> t3;
    t3(l, j, k) = t3_2(j, k, l);
    for(int ll = 0; ll < 4; ++ll)
      {
        test_for_zero(
          (t4(i, j, k, l) * t3(k, i, j))(ll)
            - (t4(0, 0, 0, ll) * t3(0, 0, 0) + t4(0, 0, 1, ll) * t3(1, 0, 0)
               + t4(0, 0, 2, ll) * t3(2, 0, 0) + t4(0, 1, 0, ll) * t3(0, 0, 1)
               + t4(0, 1, 1, ll) * t3(1, 0, 1)
               + t4(0, 1, 2, ll) * t3(2, 0, 1)),
          "T4(i,j,k,l)*T3(k,i,j)(" + std::to_string(ll) + ")");
        test_for_zero(
          (t3(k, i, j) * t4(i, j, k, l))(ll)
            - (t4(0, 0, 0, ll) * t3(0, 0, 0) + t4(0, 0, 1, ll) * t3(1, 0, 0)
               + t4(0, 0, 2, ll) * t3(2, 0, 0) + t4(0, 1, 0, ll) * t3(0, 0, 1)
               + t4(0, 1, 1, ll) * t3(1, 0, 1)
               + t4(0, 1, 2, ll) * t3(2, 0, 1)),
          "T3(k,i,j)*T4(i,j,k,l)(" + std::to_string(ll) + ")");
      }
  }
  {
    Tensor3<double, 4, 3, 2> t3;
    t3(l, k, j) = t3_2(j, k, l);

    for(int ll = 0; ll < 4; ++ll)
      {
        test_for_zero(
          (t4(i, j, k, l) * t3(k, j, i))(ll)
            - (t4(0, 0, 0, ll) * t3(0, 0, 0) + t4(0, 0, 1, ll) * t3(1, 0, 0)
               + t4(0, 0, 2, ll) * t3(2, 0, 0) + t4(0, 1, 0, ll) * t3(0, 1, 0)
               + t4(0, 1, 1, ll) * t3(1, 1, 0)
               + t4(0, 1, 2, ll) * t3(2, 1, 0)),
          "T4(i,j,k,l)*T3(k,j,i)(" + std::to_string(ll) + ")");
        test_for_zero(
          (t3(k, j, i) * t4(i, j, k, l))(ll)
            - (t4(0, 0, 0, ll) * t3(0, 0, 0) + t4(0, 0, 1, ll) * t3(1, 0, 0)
               + t4(0, 0, 2, ll) * t3(2, 0, 0) + t4(0, 1, 0, ll) * t3(0, 1, 0)
               + t4(0, 1, 1, ll) * t3(1, 1, 0)
               + t4(0, 1, 2, ll) * t3(2, 1, 0)),
          "T3(k,j,i)*T4(i,j,k,l)(" + std::to_string(ll) + ")");
      }
  }
}
