#!python

cubit.cmd('new')

autofactor=6; 
zval=3; # 1
str1 ='brick x 1 y 1 z ' + str(zval); cubit.cmd(str1) 
str1 ='cylinder height ' + str(zval) + ' rad 0.4442'; cubit.cmd(str1) 

#cubit.cmd('brick x 1 y 1 z 1')
#cubit.cmd('cylinder height 1 rad 0.4442')

cubit.cmd('subtract volume 2 from volume 1 keep')
cubit.cmd('delete volume 2')
cubit.cmd('subtract volume 3 from volume 1 keep')
cubit.cmd('delete volume 1')

cubit.cmd('rotate volume 3 to 4 about y angle 90')

cubit.cmd('imprint volume 3 4')   
cubit.cmd('merge volume 3 4') 

#=============================================================
#Meshing negative x, y and z face of the RVE and coping the same to its positive faces
#=============================================================

cubit.cmd('group "g1" add surface 11 18') 
cubit.cmd('group "g2" add surface 15')  
cubit.cmd('group "g3" add surface 14') 
cubit.cmd('group "g4" add surface 12 19')
cubit.cmd('group "g5" add surface 13') 
cubit.cmd('group "g6" add surface 16') 

# --------------------------------------------------------------

cubit.cmd('surface 11 size auto factor 6') # 5     
cubit.cmd('surface 11 scheme trimesh')      
cubit.cmd('mesh surface 11')      
cubit.cmd('surface 12 scheme copy source surface 11 source vertex 15 target vertex 20 source curve 18 target curve 24 nosmoothing')  
cubit.cmd('mesh surface 12')  

cubit.cmd('surface 18 size auto factor 6') # 5      
cubit.cmd('surface 18 scheme trimesh')      
cubit.cmd('mesh surface 18')      
cubit.cmd('surface 19 scheme mirror source surface 18 source curve 16 target curve 15 nosmoothing')  
cubit.cmd('mesh surface 19')  
 
cubit.cmd('surface 15 size auto factor 5')     
cubit.cmd('surface 15 scheme trimesh')     
cubit.cmd('mesh surface 15')     
cubit.cmd('surface 13 scheme copy source surface 15 source vertex 15 target vertex 16 source curve 18 target curve 20 nosmoothing') 
cubit.cmd('mesh surface 13') 

cubit.cmd('surface 14 size auto factor 5')    
cubit.cmd('surface 14 scheme trimesh')    
cubit.cmd('mesh surface 14')    
cubit.cmd('surface 16 scheme copy source surface 14 source vertex 15 target vertex 14 source curve 19 target curve 17 nosmoothing')
cubit.cmd('mesh surface 16')

#============================================================= 
#Mesh volume 
#============================================================= 
 
cubit.cmd('volume all scheme Tetmesh') 
cubit.cmd('mesh volume all') 
 
#============================================================= 
#Defining blocks for elastic, transversely-isotropic and potential flow problems  
#============================================================= 
 
vol=['3', '4', '4']  
mat=['MAT_ELASTIC_1','MAT_ELASTIC_TRANSISO_1','PotentialFlow_1']  
for i in range(0, 3):  
    cubit.cmd('set duplicate block elements on') 
    str1='block  ' + str(i+1) +' volume '+vol[i]; cubit.cmd(str1)  
    str1='block  ' + str(i+1) +' name "'+mat[i] + '"'; cubit.cmd(str1)  

#============================================================= 
#Material properties for matrix part  
#============================================================= 
  
cubit.cmd('block 1 attribute count 2')  
Em=3.35e3; Enu=0.35;   # LY556 Epoxy: Gotsis & Chamis

Elastic=[str(Em), str(Enu)]  
for i in range(0, 2):  
    str1='block 1 attribute index ' + str(i+1) +' '+Elastic[i]; cubit.cmd(str1)  
  
#============================================================= 
#Material properties for fibres  
#============================================================= 
 
#to use as isotropic 
cubit.cmd('block 2 attribute count 5')    
Ep=80e3; Ez=80e3; nup=0.2; nupz=0.2;  Gzp=33.33e3;  
#Ep=3.35e3; Ez=3.35e3; nup=0.35; nupz=0.35;  Gzp=1.2407e3;

TransIso=[str(Ep), str(Ez), str(nup), str(nupz), str(Gzp)]   
for i in range(0, 5):   
    str1='block 2 attribute index ' + str(i+1) +' '+TransIso[i]; cubit.cmd(str1)  
   
  
#============================================================= 
#Material properties for interface between fibres and matrix  
#============================================================= 
 
alpha_interf=500 
cubit.cmd('set duplicate block elements on')  
str1='block 4 surface 10'; cubit.cmd(str1)  
str1='block 4 name "MAT_INTERF_1"'; cubit.cmd(str1)  
cubit.cmd('block 4 attribute count 4')  
str1='block 4 attribute index 1 '+str(alpha_interf); cubit.cmd(str1)    #now we use 4 parameters for interface  
str1='block 4 attribute index 2 '+str(0.0); cubit.cmd(str1)  
str1='block 4 attribute index 3 '+str(0.0); cubit.cmd(str1)  
str1='block 4 attribute index 4 '+str(0.0); cubit.cmd(str1)   

#============================================================= 
#Defining interfaces 
#============================================================= 
 
Interface=['10']   
for i in range(0, 1):   
    str1='sideset ' + str(i+1) +' surface '+Interface[i]; cubit.cmd(str1)   
    str1='sideset ' + str(i+1) +' name "interface'+str(i+1); cubit.cmd(str1)   
    
#============================================================= 
#Defining pressures for potential flow problem  
#============================================================= 
 
Pres=['18', '19']; count=0;  count1=len(Interface);
for i in range(0, 1):  
    str1='create pressure '+str(count+1)+' on surface '+str(Pres[count])+' magnitude 1';  cubit.cmd(str1)  
    str1='create pressure '+str(count+2)+' on surface '+str(Pres[count+1])+' magnitude -1';  cubit.cmd(str1) 
    str1='sideset '+str(count1+1)+' name "PressureIO_' + str(i+1) + '_1"'; cubit.cmd(str1) 
    str1='sideset '+str(count1+2)+' name "PressureIO_' + str(i+1) + '_2"'; cubit.cmd(str1) 
    count=count+2;   count1=count1+2;  
    
#============================================================= 
#Defining surfaces for dispacement, traction and periodic boundary conditions  
#============================================================= 

cubit.cmd('sideset 101 surface 12 19 13 16')  # all -ve boundary surfaces for periodic boundary conditions  
cubit.cmd('sideset 102 surface 11 18 15 14')  # all +ve boundary surfaces  for periodic boundary conditions  
cubit.cmd('sideset 103 surface 12 19 13 16 11 18 15 14')  # all boundary surfaces  

#============================================================= 
#Definign zero proessrues for potential flow problem (This should be of the same order as PotentialFlow blocks )
#============================================================= 
 
zeroPressureNode=[391] # 109
for i in range(0, 1):  
    str1='nodeset ' + str(i+1) + ' node ' + str(zeroPressureNode[i]); cubit.cmd(str1) 
    str1='nodeset ' + str(i+1)+' name "ZeroPressure_' + str(i+1)+ '"'; cubit.cmd(str1)    
    
#============================================================= 
#Saving input RVE file  
#=============================================================   

cubit.cmd('save as "/Users/nxz6/mofem_installation/mofem-cephas/mofem/users_modules/reliability/meshes/UD_GFRP_K_VF62.cub" overwrite')    



