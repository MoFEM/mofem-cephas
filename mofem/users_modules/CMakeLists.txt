# MoFEM is free software: you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your
# option) any later version.
#
# MoFEM is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
# License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with MoFEM. If not, see <http://www.gnu.org/licenses/>

project(MoFEM-UserModules C CXX)

cmake_minimum_required(VERSION 2.8.7)

find_package(MoFEM 0.3.7
  REQUIRED HINTS ${MOFEM_DIR} ../ ../../ $ENV{MOFEM_DIR}
)
message(STATUS "MoFEM version ${MoFEM_VERSION}")

macro(CHECK_MOFEM_VERSION VERSION_MAJOR VERSION_MINOR VERSION_PATCH)

  if(${MoFEM_VERSION_MAJOR} LESS ${VERSION_MAJOR})
    SET(WRONG_MOFEM_VERSION 1)
  elseif(${MoFEM_VERSION_MINOR} LESS ${VERSION_MINOR})
    SET(WRONG_MOFEM_VERSION 1)
  elseif(${MoFEM_VERSION_PATCH} LESS ${VERSION_PATCH})
    SET(WRONG_MOFEM_VERSION 1)
  endif(${MoFEM_VERSION_MAJOR} LESS ${VERSION_MAJOR})

  if(WRONG_MOFEM_VERSION)
    message(
      FATAL_ERROR
      "(Update MoFEM) Wrong MoFEM version: "
      "${MoFEM_VERSION} < ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}"
    )
  endif(WRONG_MOFEM_VERSION)

endmacro(CHECK_MOFEM_VERSION)

find_package(Git)
# find_package(PythonInterp)
# find_package(PythonLibs)
# if(PYTHON_INCLUDE_DIRS)
#   include_directories ( ${PYTHON_INCLUDE_DIRS} )
# endif(PYTHON_INCLUDE_DIRS)

include(ExternalProject)
include(${MoFEM_PROJECT_SOURCE_DIR}/cmake/ExportFile.cmake)

set(CMAKE_C_COMPILER ${MoFEM_CMAKE_C_COMPILER})
set(CMAKE_CXX_COMPILER ${MoFEM_CMAKE_CXX_COMPILER})

include_directories(
  ${MoFEM_PROJECT_INCLUDE_DIRECTORIES}
  ${MoFEM_PETSC_DIR}/${MoFEM_PETSC_ARCH}/include
  ${MoFEM_PETSCVAR_DIR}/include
)

add_definitions(${MOAB_DEFINITIONS})

include_directories("${MoFEM_PROJECT_SOURCE_DIR}/include")
include_directories("${MoFEM_PROJECT_SOURCE_DIR}/third_party")
include_directories("${MoFEM_PROJECT_SOURCE_DIR}/third_party/cblas")
include_directories("${MoFEM_PROJECT_SOURCE_DIR}/src/approximation")
include_directories("${MoFEM_PROJECT_SOURCE_DIR}/src/approximation/c")
include_directories("${MoFEM_PROJECT_SOURCE_DIR}/src/multi_indices")
include_directories("${MoFEM_PROJECT_SOURCE_DIR}/src/interfaces")
include_directories("${MoFEM_PROJECT_SOURCE_DIR}/src/petsc")
include_directories("${MoFEM_PROJECT_SOURCE_DIR}/src/finite_elements")

include_directories("${MoFEM_PROJECT_BINARY_DIR}/include")

link_directories("${MoFEM_PROJECT_BINARY_DIR}/src/approximation")
link_directories("${MoFEM_PROJECT_BINARY_DIR}/src/multi_indices")
link_directories("${MoFEM_PROJECT_BINARY_DIR}/src/interfaces")
link_directories("${MoFEM_PROJECT_BINARY_DIR}/src/petsc")
link_directories("${MoFEM_PROJECT_BINARY_DIR}/src/finite_elements")
link_directories("${MoFEM_PROJECT_BINARY_DIR}/third_party")
link_directories("${MoFEM_PROJECT_BINARY_DIR}/third_party/cblas")

link_directories(${PROJECT_BINARY_DIR})

#add executable library form subdirectory
enable_testing()
include(CTest)

#add coverage
if(WITHCOVERAGE)
  set(GCC_COVERAGE_COMPILE_FLAGS "-Wall -fprofile-arcs -ftest-coverage")
  add_definitions(${GCC_COVERAGE_COMPILE_FLAGS})
  set(CMAKE_EXE_LINKER_FLAGS "${GCC_COVERAGE_COMPILE_FLAGS}")
endif(WITHCOVERAGE)

# source path
set(UM_SOURCE_DIR ${MoFEM_PROJECT_SOURCE_DIR}/users_modules)
if(STAND_ALLONE_USERS_MODULES)
  set(UM_SOURCE_DIR ${PROJECT_SOURCE_DIR})
endif(STAND_ALLONE_USERS_MODULES)

# third party libraries
if(TETGEN_LIBRARY)
  include_directories("${TETGEN_DIR}/include")
  add_definitions( -DWITH_TETGEN )
  message(STATUS "WITH TETEGEN")
endif(TETGEN_LIBRARY)

if(NETGEN_LIBRARY)
  include_directories("${NETGEN_DIR}/include")
  include_directories("${NETGEN_SRC_DIR}/libsrc/include")
  add_definitions( -DWITH_NETGEN )
  message(STATUS "WITH NETEGEN")
endif(NETGEN_LIBRARY)

if(CGAL_DIR)
  find_package(CGAL HINTS ${CGAL_DIR}/lib/CGAL)
  if(CGAL_CONFIG_LOADED)
    include_directories(${CGAL_INCLUDE_DIRS})
    link_directories(${CGAL_LIBRARIES_DIR})
    add_definitions( -DWITH_CGAL )
    message(STATUS "WITH CGAL")
  endif(CGAL_CONFIG_LOADED)
endif(CGAL_DIR)

if(ADOL-C_LIBRARY)
  include_directories("${ADOL-C_DIR}/include")
  add_definitions( -DWITH_ADOL_C )
  message(STATUS "WITH ADLOC-C")
endif(ADOL-C_LIBRARY)

if(SLEPC_LIBRARY)
  include_directories("${SLEPC_DIR}/${PETSC_ARCH}/include")
  include_directories("${SLEPC_DIR}/include")
  add_definitions( -DWITH_SLEPC_DIR )
  message(STATUS "WITH SLEPC")
endif(SLEPC_LIBRARY)

include(ModulesList.cmake)
