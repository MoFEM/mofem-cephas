/* This file is part of MoFEM.
 * MoFEM is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or (at your
 * option) any later version.
 *
 * MoFEM is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with MoFEM. If not, see <http://www.gnu.org/licenses/>. */

#ifndef __GEL_HPP__
#define __GEL_HPP__

#ifndef WITH_ADOL_C
  #error "MoFEM need to be compiled with ADOL-C"
#endif

/** \brief Implementation of Gel constitutive model

Implementation follows constitutive equation from:

VISCOELASTICITY AND POROELASTICITY IN ELASTOMERIC GELS
Acta Mechanica Solida Sinica, Vol. 25, No. 5,
Yuhang Hu Zhigang Suo

*/
template<typename TYPE>
struct Gel {

  struct AuxFunctions {
    
    // Input

    double vAlpha; ///< Poisson ration spring alpha
    double gAlpha; ///< Sheer modulus spring alpha
    double vBeta;
    double gBeta;
    double vBetaHat;
    double gBetaHat;
    double pErmeability;
    double vIscosity;
    double oMega; ///< Volume per solvent molecule

    ublas::matrix<TYPE> strainTotal;  ///< Total strain applied at integration point
    ublas::matrix<TYPE> strainHat;    ///< Internal variable, strain in dashpot beta

    // Output

    TYPE mU;
    ublas::vector<TYPE> gradientMu;
    ublas::matrix<TYPE> stressAlpha;    ///< Stress generated by spring alpha
    ublas::matrix<TYPE> stressBeta;     ///< Stress generated by spring beta
    ublas::matrix<TYPE> strainHatDot;   ///< Rate of dashpot (beta) strain
    ublas::matrix<TYPE> stressBetaHat;  ///< Stress as result of volume change due to solvent concentration

    ublas::vector<TYPE> fLux;
    TYPE traceStrainTotal;
    TYPE traceStrainHat;
    TYPE traceStressBeta;

    /** \brief Calculate stress in spring alpha

    \f[
    \sigma^\alpha_{ij} = 2G^\alpha\left(\varepsilon_{i,j} + \frac{v^\alpha}{1-2v^\alpha}\varepsilon_{kk}\delta_{ij}\right)
    \f]

    */
    virtual PetscErrorCode calcualteStressAlpha() {
      PetscFunctionBegin;
      traceStrainTotal = strainTotal(0,0)+strainTotal(1,1)+strainTotal(2,2);
      stressAlpha.resize(3,3);
      double a = 2.0*gAlpha;
      stressAlpha = a*strainTotal;
      for(int ii=1; ii<3; ii++){
        stressAlpha(ii,ii) += (a*(vAlpha/(1.0-2.0*vAlpha)))*traceStrainTotal;
      }
      PetscFunctionReturn(0);
    }


    /** \brief Calculate stress in spring beta

    \f[
    \sigma^\beta_{ij} = 2G^\beta\left[
    (\varepsilon_{i,j}-\hat{\varepsilon}_{i,j})
    + \frac{v^\beta}{1-2v^\beta}(\varepsilon_{kk}-\hat{\varepsilon}_{kk})\delta_{ij}
    \right]
    \f]

    */
    virtual PetscErrorCode calcualteStressBeta() {
      PetscFunctionBegin;
      traceStrianHatMat = strainHat(0,0)+strainHat(1,1)+strainHat(2,2);
      stressBeta.resize(3,3,false);
      double a = 2.0*gBeta;
      stressBeta= a*(strainTotal-strainHat);
      for(int ii = 0;ii<3;ii++) {
        stressBeta(ii,ii) += (a*(vBeta/(1.0-2.0*vBeta)))*(traceStrainTotal-traceStrianHatMat);
      }
      PetscFunctionReturn(0);
    }


    virtual PetscErrorCode calcualteStrainHatDot() {
      PetscFunctionBegin
      traceStressBeta = stressBeta(0,0)+stressBeta(1,1)+stressBeta(2,2);
      strainHatDot = (1.0/(2.0*gBetaHat))*stressBeta
      for(int ii = 0;ii<3;ii++) {
        strainHatDot -= (vBetaHat/(1.0+vBetaHat))*traceStressBeta
      }
      PetscFunctionReturn(0);
    }

    virtual PetscErrorCode calcualteStressBetaHat() {
      PetscFunctionBegin
      stressBetaHat.resize(3,3);
      stressBetaHat.clear();
      for(int ii=0; ii<3; ii++){
        stressBetaHat(ii,ii) = mU/oMega;
      }
      PetscFunctionReturn(0);
    }

    virtual PetscErrorCode calcualteFlux() {
      PetscFunctionBegin
      fLux=-(pErmeability/(vIscosity*oMega*oMega))*gradientMu;
      PetscFunctionReturn(0);
    }

  }

};

#endif //__GEL_HPP__
