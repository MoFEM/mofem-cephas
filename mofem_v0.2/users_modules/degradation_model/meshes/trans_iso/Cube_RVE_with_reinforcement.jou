#!python
#To create RVE for all the three type of boundary conditions, i.e. (Linear dispacemet, traction and periodic)

cubit.cmd('new')

autofactor=10; 

#============================================================= 
#Geometry
#============================================================= 

cubit.cmd('brick x 1 y 1 z 1')

cubit.cmd('brick x 1 y 0.4 z 0.4')

cubit.cmd('subtract volume 2 from volume 1 keep')
cubit.cmd('delete volume 1') 
cubit.cmd('imprint volume 2 3')   
cubit.cmd('merge volume 2 3') 

#============================================================= 
#Periodic mesh  
#============================================================= 

cubit.cmd('surface 20 scheme trimesh') 
str1='surface 20  size auto factor '+str(autofactor); cubit.cmd(str1)
cubit.cmd('mesh surface 20') 
cubit.cmd('surface 22 scheme copy source surface 20 source vertex 27 target vertex 26 source curve 47 target curve 48 nosmoothing')
cubit.cmd('mesh surface 22') 

cubit.cmd('surface 10 scheme trimesh') 
str1='surface 10  size auto factor '+str(autofactor); cubit.cmd(str1)
cubit.cmd('mesh surface 10') 
cubit.cmd('surface 12 scheme copy source surface 10 source vertex 11 target vertex 10 source curve 23 target curve 24 nosmoothing')
cubit.cmd('mesh surface 12') 

cubit.cmd('surface 17 scheme trimesh') 
str1='surface 17  size auto factor '+str(autofactor); cubit.cmd(str1)
cubit.cmd('mesh surface 17') 
cubit.cmd('surface 18 scheme copy source surface 17 source vertex 26 target vertex 29 source curve 38 target curve 44 nosmoothing')
cubit.cmd('mesh surface 18') 

cubit.cmd('surface 19 scheme trimesh') 
str1='surface 19  size auto factor '+str(autofactor); cubit.cmd(str1)
cubit.cmd('mesh surface 19') 
cubit.cmd('surface 21 scheme copy source surface 19 source vertex 28 target vertex 27 source curve 45 target curve 47 nosmoothing')
cubit.cmd('mesh surface 21') 

str1='volume all size auto factor '+str(autofactor); cubit.cmd(str1)
cubit.cmd('volume all scheme tetmesh')  
cubit.cmd('mesh volume all')  


#============================================================= 
#Defining blocks for elastic, transversely-isotropic and potential flow problems  
#============================================================= 
 
vol=['3', '2','2']  
mat=['MAT_ELASTIC_1','MAT_ELASTIC_TRANSISO_1','PotentialFlow_1']  
for i in range(0, 3):  
    cubit.cmd('set duplicate block elements on')  
    str1='block  ' + str(i+1) +' volume '+vol[i]; cubit.cmd(str1)  
    str1='block  ' + str(i+1) +' name "'+mat[i] + '"'; cubit.cmd(str1)  
 

#============================================================= 
#Material properties for matrix part  
#============================================================= 
  
cubit.cmd('block 1 attribute count 2')  
Em=3.5e3; Enu=0.3;  #giga to mega as we used dimension in mm  

Elastic=[str(Em), str(Enu)]  
for i in range(0, 2):  
    str1='block 1 attribute index ' + str(i+1) +' '+Elastic[i]; cubit.cmd(str1)  
  
#============================================================= 
#Material properties for fibres  
#============================================================= 
 
#to use as isotropic 
#cubit.cmd('block 2 attribute count 5')    
#Ep=Em; Ez=Em; nup=Enu; nupz=Enu;  Gzp=Em/(2*(1+Enu));  

cubit.cmd('block 2 attribute count 5')   
Ep=40e3; Ez=230e3; nup=0.26; nupz=0.26; Gzp=24e3;    
#Ep=10*Em; Ez=20*Em; nup=0.26; nupz=0.26; Gzp=5*Em;    
#Ep=2*Em; Ez=5*Em; nup=0.26; nupz=0.26; Gzp=2*Em;    
   
TransIso=[str(Ep), str(Ez), str(nup), str(nupz), str(Gzp)]   
for i in range(0, 5):   
    str1='block 2 attribute index ' + str(i+1) +' '+TransIso[i]; cubit.cmd(str1)   
  
#============================================================= 
#Material properties for interface between fibres and matrix  
#============================================================= 
 
alpha_interf=500 
cubit.cmd('set duplicate block elements on')  
str1='block 7 surface 23 26 29 32'; cubit.cmd(str1)  
str1='block 7 name "MAT_INTERF_1"'; cubit.cmd(str1)  
cubit.cmd('block 7 attribute count 4')  
str1='block 7 attribute index 1 '+str(alpha_interf); cubit.cmd(str1)    #now we use 4 parameters for interface  
str1='block 7 attribute index 2 '+str(0.0); cubit.cmd(str1)  
str1='block 7 attribute index 3 '+str(0.0); cubit.cmd(str1)  
str1='block 7 attribute index 4 '+str(0.0); cubit.cmd(str1)  
  

#============================================================= 
#Defining interfaces 
#============================================================= 
 
Interface=['7', '8','9','11']   
for i in range(0, 4):   
    str1='sideset ' + str(i+1) +' surface '+Interface[i]; cubit.cmd(str1)   
    str1='sideset ' + str(i+1) +' name "interface'+str(i+1); cubit.cmd(str1)   
  
#============================================================= 
#Defining pressures for potential flow problem  
#============================================================= 
 
Pres=['10', '12']; count=0;  count1=len(Interface);
for i in range(0, 1):  
    str1='create pressure '+str(count+1)+' on surface '+str(Pres[count])+' magnitude 1';  cubit.cmd(str1)  
    str1='create pressure '+str(count+2)+' on surface '+str(Pres[count+1])+' magnitude -1';  cubit.cmd(str1) 
    str1='sideset '+str(count1+1)+' name "PressureIO_' + str(i+1) + '_1"'; cubit.cmd(str1) 
    str1='sideset '+str(count1+2)+' name "PressureIO_' + str(i+1) + '_2"'; cubit.cmd(str1) 
    count=count+2;   count1=count1+2; 

#============================================================= 
#Definign zero proessrues for potential flow problem (This should be of the same order as PotentialFlow blocks )
#============================================================= 
 
zeroPressureNode=[1]
for i in range(0, 1):  
    str1='nodeset ' + str(i+1) + ' node ' + str(zeroPressureNode[i]); cubit.cmd(str1) 
    str1='nodeset ' + str(i+1)+' name "ZeroPressure_' + str(i+1)+ '"'; cubit.cmd(str1) 

#============================================================= 
#Defining surfaces for dispacement, traction and periodic boundary conditions  
#============================================================= 

cubit.cmd('sideset 101 surface 20 10 19 18')  # all -ve boundary surfaces  
cubit.cmd('sideset 102 surface 21 17 22 12')  # all +ve boundary surfaces  
cubit.cmd('sideset 103 surface 20 10 19 18 21 17 22 12')  # all boundary surfaces  

cubit.cmd('save as "/Users/zahur/Documents/moFEM/mofem-cephas/mofem_v0.2/users_modules/degradation_model/meshes/trans_iso/Cube_RVE_with_reinforcement.cub" overwrite')










