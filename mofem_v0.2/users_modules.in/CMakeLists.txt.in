# Copyright (C) 2013, Lukasz Kaczmarczyk (likask AT wp.pl)
# The MoFEM package is copyrighted by Lukasz Kaczmarczyk. 
# It can be freely used for educational and research purposes 
# by other institutions. If you use this softwre pleas cite my work. 
#
# MoFEM is free software: you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your
# option) any later version.
#
# MoFEM is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
# License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with MoFEM. If not, see <http://www.gnu.org/licenses/>

cmake_minimum_required(VERSION 2.8)

find_package(MoFEM 0.2.0
  REQUIRED HINTS ${MOFEM_DIR} ../ ../../ $ENV{MOFEM_DIR}
)

include(${MoFEM_PROJECT_SOURCE_DIR}/cmake/ExportFile.cmake)

set(CMAKE_C_COMPILER ${MoFEM_CMAKE_C_COMPILER}) 
set(CMAKE_CXX_COMPILER ${MoFEM_CMAKE_CXX_COMPILER})

project(MoFEM_Examples C CXX)

include_directories(
  ${MoFEM_PROJECT_INCLUDE_DIRECTORIES}
  ${MoFEM_PETSC_DIR}/${MoFEM_PETSC_ARCH}/include
  ${MoFEM_PETSCVAR_DIR}/include
  )

include_directories("${MoFEM_PROJECT_SOURCE_DIR}/include")
include_directories("${MoFEM_PROJECT_SOURCE_DIR}/third_party")
include_directories("${MoFEM_PROJECT_SOURCE_DIR}/third_party/cblas")
include_directories("${MoFEM_PROJECT_SOURCE_DIR}/src/approximation")
include_directories("${MoFEM_PROJECT_SOURCE_DIR}/src/approximation/c")
include_directories("${MoFEM_PROJECT_SOURCE_DIR}/src/multi_indices")
include_directories("${MoFEM_PROJECT_SOURCE_DIR}/src/interfaces")
include_directories("${MoFEM_PROJECT_SOURCE_DIR}/src/petsc")
include_directories("${MoFEM_PROJECT_SOURCE_DIR}/src/finite_elements")
include_directories("${MoFEM_PROJECT_SOURCE_DIR}/finite_element_library")

include_directories("${MoFEM_PROJECT_BINARY_DIR}/include")

link_directories("${MoFEM_PROJECT_BINARY_DIR}/src/approximation")
link_directories("${MoFEM_PROJECT_BINARY_DIR}/src/multi_indices")
link_directories("${MoFEM_PROJECT_BINARY_DIR}/src/interfaces")
link_directories("${MoFEM_PROJECT_BINARY_DIR}/src/petsc")
link_directories("${MoFEM_PROJECT_BINARY_DIR}/src/finite_elements")
link_directories("${MoFEM_PROJECT_BINARY_DIR}/finite_element_library")
link_directories("${MoFEM_PROJECT_BINARY_DIR}/third_party")
link_directories("${MoFEM_PROJECT_BINARY_DIR}/third_party/cblas")

link_directories(${PROJECT_BINARY_DIR})

#add executable library form subdirectory
enable_testing()
include(CTest)

#add coverage
if(WITHCOVERAGE) 
  set(GCC_COVERAGE_COMPILE_FLAGS "-Wall -fprofile-arcs -ftest-coverage")
  add_definitions(${GCC_COVERAGE_COMPILE_FLAGS})
  set(CMAKE_EXE_LINKER_FLAGS "${GCC_COVERAGE_COMPILE_FLAGS}")
endif(WITHCOVERAGE) 

# source path
set(UM_SOURCE_DIR ${MoFEM_PROJECT_SOURCE_DIR}/users_modules)
if(STAND_ALLONE_USERS_MODULES)
  set(UM_SOURCE_DIR ${PROJECT_SOURCE_DIR})
endif(STAND_ALLONE_USERS_MODULES)

# third party libraries
if(TETGEN_LIBRARY) 
  include_directories("${TETGEN_DIR}/include")
  add_definitions( -DWITH_TETGEM )
endif(TETGEN_LIBRARY)

# Users modules

add_subdirectory(thermal)
add_subdirectory(ultraweak)

# Obsolete

include_directories(${MoFEM_PROJECT_SOURCE_DIR}/users_modules/obsolete)
include_directories(${MoFEM_PROJECT_SOURCE_DIR}/users_modules/obsolete/c)

add_library(users_modules_obsolete
  ${UM_SOURCE_DIR}/obsolete/impl/ArcLengthTools.cpp
  ${UM_SOURCE_DIR}/obsolete/impl/FEMethod_ComplexForLazy.cpp
  ${UM_SOURCE_DIR}/obsolete/impl/FEMethod_SurfaceConstrains.cpp
  ${UM_SOURCE_DIR}/obsolete/impl/FEMethod_LowLevelStudent.cpp
  ${UM_SOURCE_DIR}/obsolete/impl/FEMethod_UpLevelStudent.cpp
  ${UM_SOURCE_DIR}/obsolete/impl/SurfacePressureComplexForLazy.cpp
  ${UM_SOURCE_DIR}/obsolete/impl/MatShellConstrainsByMarkAinsworth.cpp
)

add_library(complex_for_lazy_obsolete
  ${MoFEM_PROJECT_SOURCE_DIR}/users_modules/obsolete/c_impl/complex_for_lazy.c
)

add_subdirectory(elasticity)
add_subdirectory(arc_length_nonlinear_elasticity)
add_subdirectory(fracture_mechanics)











