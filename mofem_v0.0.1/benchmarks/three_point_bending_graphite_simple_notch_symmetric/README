Check before run
================

* Check where is your mesh file
* Check what verion of openmpi (or other MPI library) are you using


Notes
=====

* Exteranl forces and Young modulus are rescaled by factor 1e-8
  for better matrix conditioning. 
* Griffith energy for graphite for is 200 * 1e-8 for units consistency

Example run
===========

1) Calulation stress intensity factor K1

* Calulation of Griffith energy and SIF for mode K1
* Calulate problem for three approximation orders, i.e. 1 (linear), 2 (quadratic), 3 (qubic)
* Calulate problem for three refinment levels (in proximity of crack front)

* convergence_study.sh NAME_OF_SCRIPT
* -f NAME_OF_FILE 
* -l VALUE_OF_LOAD_FACTOR 
* -g REFERENCE_GRIFFITH_ENERGY 
* -o APPROX_ORDERS_SEPARATED_BY_COMMAS 
* -r REFINMENT_LEVELS_SEPARATED_BY_COMMAS

./convergence_study.sh -f T3_horiz.cub -l -1 -g 2e-6 -o 1,2,3 -r 1,2

or you can run that in step by step

./convergence_study.sh -f T3_horiz.cub -l -1 -g 2e-6 -o 2 -r 1,2

./convergence_study.sh -f T3_horiz.cub -l -1 -g 2e-6 -o 2 -r 1,2

./convergence_study.sh -f T3_horiz.cub -l -1 -g 2e-6 -o 1 -r 1,2

* As result of function, directory is created, f.e. material_forces_T3_horiz_DATE-2013-12-16_TIME_13_47_56

2) Calulation of crack propagation

* Crack popagation as an input file uses preoviously obtained soltion from step (1)
* Note that linear elements (1st) order have sheer loking, and usually give overstiff solution.

* out_spatial_1_1.h5m - this is 1-order 1-refinment_level

./arc_length.sh -f material_forces_T3_horiz_DATE-2013-12-16_TIME_16_24_43/out_spatial_1_1.h5m -a 1e-4 -n 60 -g 2e-6

* out_spatial_2_1.h5m - this is 2-order 1-refinment_level

./arc_length.sh -f material_forces_T3_horiz_DATE-2013-12-16_TIME_16_24_43/out_spatial_2_1.h5m -a 1e-4 -n 60 -g 2e-6

* out_spatial_1_2.h5m - this is 1-order 2-refinment_level

./arc_length.sh -f material_forces_T3_horiz_DATE-2013-12-16_TIME_16_24_43/out_spatial_1_2.h5m -a 1e-4 -n 60 -g 2e-6

3) Plotting

* check if in your system you have installed awk and grep
* copy and paste to line command

echo "0 0" | tee load_path_CrackArea_vs_Lambda | tee  && grep "load_path:" arc_length_out_spatial_1_1_DATE-2013-12-16_TIME_16_36_03/log | awk '{print $4,-$6}' | tee -a load_path_CrackArea_vs_Lambda

echo "0 0" | tee load_path_DispY_vs_Lambda | tee gp && grep "load_path_disp ent 383 dim 1"  arc_length_out_spatial_1_1_DATE-2013-12-16_TIME_16_36_03/log | awk '{print -$13,-$15}' | tee -a load_path_DispY_vs_Lambda

or short version,

grep "load_path:" arc_length_out_spatial_1_1_DATE-2013-12-16_TIME_16_36_03/log
grep "load_path_disp ent 383 dim 1"  arc_length_out_spatial_1_1_DATE-2013-12-16_TIME_16_36_03/log

To Do
=====

* Refined crack area increment da = 0.25e-4, da = 0.5e-4, da = 1e-4
* Refinde crack front for -r 2 and more
* Refined mesh in cubit, how this chaneg quality of solution?
* Plot crack area increment vs total elastic energy

Data to make plots
==================

* load_path_DispY_vs_Lambda
* out_spatial_1_1.h5m - this is 1-order 1-refinment_level

Lambda Disp_Y
0 0
0.00013581 0.89495
0.00013551 0.87468
0.0001353 0.85495
0.00013517 0.83576
0.00013512 0.81714
0.00013518 0.79915
0.00013531 0.78159
0.0001355 0.7644
0.00013574 0.74748
0.00013603 0.73079
0.00013637 0.71438
0.00013673 0.69813
0.00013715 0.68216
0.00013759 0.66634
0.00013809 0.65081
0.0001386 0.63543
0.00013918 0.62037
0.00013978 0.60549
0.00014045 0.59095
0.00014116 0.57663
0.00014194 0.56267
0.00014276 0.54897
0.00014367 0.53562
0.00014463 0.52254
0.00014568 0.50976
0.00014678 0.49722
0.00014797 0.48494
0.00014921 0.47292
0.00015054 0.46099
0.00015193 0.44937
0.00015342 0.43796
0.00015495 0.42674
0.0001566 0.41578
0.00015831 0.40506
0.00016014 0.39458
0.00016203 0.38438
0.00016405 0.37441
0.00016615 0.36473
0.00016839 0.35529
0.00017071 0.34614
0.00017318 0.33723
0.00017575 0.32864
0.00017847 0.32028
0.0001813 0.31224
0.0001843 0.30447
0.00018743 0.29703
0.00019072 0.28987
0.00019418 0.28304
0.00019781 0.27654
0.00020163 0.27041
0.00020565 0.26468
0.00020989 0.25943
0.00021437 0.25471
0.00021911 0.25061
0.00022413 0.24723
0.00022947 0.24465
0.00023516 0.24298
0.00024124 0.24236
0.00024779 0.24302
0.00025487 0.24524
0.00026259 0.24945

* load_path_DispY_vs_Lambda
* out_spatial_2_1.h5m - this is 2-order 1-refinment_level

Lambda Disp_Y
0 0
0.00014325 0.75731
0.00014278 0.73892
0.00014239 0.72095
0.00014208 0.7034
0.00014185 0.68625
0.00014169 0.66947
0.00014161 0.65303
0.0001416 0.63694
0.00014165 0.62113
0.00014177 0.60564
0.00014195 0.5904
0.0001422 0.57544
0.0001425 0.56071
0.00014287 0.54623
0.00014329 0.53197
0.00014378 0.51797
0.00014432 0.50419
0.00014494 0.49066
0.00014561 0.47735
0.00014636 0.46429
0.00014717 0.45145
0.00014806 0.43885
0.00014902 0.42649
0.00015006 0.41432
0.00015117 0.40236
0.00015238 0.39057
0.00015366 0.37897
0.00015504 0.3675
0.0001565 0.35627
0.00015806 0.34518
0.00015973 0.33419
0.00016153 0.32331
0.00016343 0.31265
0.00016545 0.30218
0.0001676 0.29193
0.00016989 0.28187
0.00017233 0.27202
0.00017493 0.26237
0.00017772 0.25293
0.00018069 0.24368
0.00018387 0.23465
0.00018729 0.22579
0.00019095 0.21715
0.00019489 0.20868
0.00019913 0.20041
0.00020372 0.19232
0.00020867 0.1844
0.00021405 0.17663
0.0002199 0.16902
0.00022629 0.16154
0.0002333 0.15418
0.00024101 0.14701
0.00024955 0.13992
0.00025904 0.13307
0.0002697 0.12622
0.00028167 0.11966
0.00029535 0.11293
0.000311 0.10654
0.0003293 0.09982
0.00035076 0.093546
0.00037666 0.086897
0.00040819 0.080876
0.00044799 0.074112


* load_path_DispY_vs_Lambda
* out_spatial_3_1.h5m - this is 3-order 1-refinment_level (not finished yet, need update)

Lambda Disp_Y
0 0
0.00014711 0.74416
0.00014652 0.72605
0.00014601 0.70834
0.00014558 0.69102
0.00014524 0.67407
0.00014496 0.65749
0.00014476 0.64122
0.00014463 0.62527
0.00014457 0.60961
0.00014457 0.59424
0.00014463 0.57914
0.00014476 0.56429
0.00014495 0.54967
0.0001452 0.53531
0.0001455 0.52117
0.00014588 0.50728
0.00014631 0.49361
0.00014681 0.4802
0.00014738 0.467
0.00014801 0.45405
0.00014871 0.44133
0.00014949 0.42884
0.00015034 0.41657
0.00015127 0.4045
0.00015227 0.39265
0.00015335 0.38094
0.00015452 0.36942
0.00015578 0.35804
0.00015712 0.34689
0.00015858 0.33576
0.00016014 0.32479
0.00016181 0.314
0.00016359 0.3034
0.00016549 0.293
0.00016752 0.28274
0.00016969 0.27269
0.00017201 0.26281
0.00017449 0.25313
0.00017714 0.24361
0.00017997 0.23428
0.000183 0.22511
0.00018625 0.21612
0.00018975 0.2073
0.0001935 0.19862
0.00019754 0.19011
0.00020191 0.18171
0.00020663 0.17347
0.00021175 0.16527
0.00021732 0.15723
0.00022339 0.14915

