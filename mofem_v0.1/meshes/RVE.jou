#!python
#This scrip will create RVE including fibres and matrix, which can be used for all 
#three type of boundary conditions including dispalcement, traction and periodic. 

cubit.cmd('new')
#=============================================================
#Geometry Input parametrs
#=============================================================
W_wrap=0.3; H_wrap=0.1514; hgap_wrap=0.09 
W_weft=0.3; H_weft=0.0757; hgap_weft=1.2 
L_RVE=3.0;    W_RVE=0.8;        H_RVE=0.3;  
Vgap=0.012 

s_weft=hgap_weft+W_weft;    s_wraf=hgap_wrap+W_wrap
T=(H_weft/2+H_wrap/2)/2+Vgap

L_RVE=2*s_weft;    W_RVE=2*s_wraf;     H_RVE=0.3;   
 
#=============================================================
#Create vartices for splines to create splines
#=============================================================

coordx=-11.5*s_weft;  coordy=T; coordz=0;
for i in range(0, 24):
    if i % 2 == 0:
        str1='create vertex ' + str(coordx) +' '+str(coordy)+' '+str(coordz)+' color' ; coordx=coordx+s_weft; 
        cubit.cmd(str1)
    if i % 2 == 1:
        str1='create vertex ' + str(coordx) +' '+str(-coordy)+' '+str(coordz)+' color' ; coordx=coordx+s_weft; 
        cubit.cmd(str1)

coordx=-11.5*s_weft;  coordy=-T; coordz=s_wraf; 
for i in range(0, 24): 
    if i % 2 == 0: 
        str1='create vertex ' + str(coordx) +' '+str(coordy)+' '+str(coordz)+' color' ; coordx=coordx+s_weft;  
        cubit.cmd(str1) 
    if i % 2 == 1: 
        str1='create vertex ' + str(coordx) +' '+str(-coordy)+' '+str(coordz)+' color' ; coordx=coordx+s_weft;  
        cubit.cmd(str1) 
 
coordx=-0.5*s_weft;  coordy=-T; coordz=-11*s_wraf; 
for i in range(0, 24): 
    if i % 2 == 0: 
        str1='create vertex ' + str(coordx) +' '+str(coordy)+' '+str(coordz)+' color' ; coordz=coordz+s_wraf;  
        cubit.cmd(str1) 
    if i % 2 == 1: 
        str1='create vertex ' + str(coordx) +' '+str(-coordy)+' '+str(coordz)+' color' ; coordz=coordz+s_wraf;  
        cubit.cmd(str1) 
 
coordx=0.5*s_weft;  coordy=T; coordz=-11*s_wraf; 
for i in range(0, 24): 
    if i % 2 == 0: 
        str1='create vertex ' + str(coordx) +' '+str(coordy)+' '+str(coordz)+' color' ; coordz=coordz+s_wraf;  
        cubit.cmd(str1) 
    if i % 2 == 1: 
        str1='create vertex ' + str(coordx) +' '+str(-coordy)+' '+str(coordz)+' color' ; coordz=coordz+s_wraf;  
        cubit.cmd(str1) 

#=============================================================
#Joint vertices to create splines 
#=============================================================

Tvertices=24;  
vertices=range(1,Tvertices+1); count1=0;   
for i in range(0, 4): 
    str1='create curve spline vertex '
    for j in range(0, 24):
        str1=str1+' '+ str(count1+vertices[j])
    cubit.cmd(str1);  count1=count1+24;

#=============================================================
#Creating fibers with elliptical cross sections  
#=============================================================
     
cubit.cmd('create planar surface with plane normal to curve 1 distance 0 from vertex 1') 
str1='create curve location vertex 1 direction curve 8 length '+ str(W_wrap/2); cubit.cmd(str1) 
str1='create curve location vertex 1 direction curve 7 length  '+str(H_wrap/2); cubit.cmd(str1) 
cubit.cmd('create surface ellipse vertex 102 104 1')
cubit.cmd('sweep surface 2 along curve 1')

cubit.cmd('create planar surface with plane normal to curve 2 distance 0 from vertex 25') 
str1='create curve location vertex 25 direction curve 17 length '+ str(W_wrap/2); cubit.cmd(str1) 
str1='create curve location vertex 25 direction curve 16 length  '+str(H_wrap/2); cubit.cmd(str1) 
cubit.cmd('create surface ellipse vertex 112 114 25')
cubit.cmd('sweep surface 6 along curve 2')

cubit.cmd('create planar surface with plane normal to curve 3 distance 0 from vertex 49')
str1='create curve location vertex 49 direction curve 24 length '+ str(W_weft/2); cubit.cmd(str1)
str1='create curve location vertex 49 direction curve 23 length  '+str(H_weft/2); cubit.cmd(str1)
cubit.cmd('create surface ellipse vertex 122 124 49')
cubit.cmd('sweep surface 10 along curve 3')

cubit.cmd('create planar surface with plane normal to curve 4 distance 0 from vertex 73')
str1='create curve location vertex 73 direction curve 33 length '+ str(W_weft/2); cubit.cmd(str1)
str1='create curve location vertex 73 direction curve 32 length  '+str(H_weft/2); cubit.cmd(str1)
cubit.cmd('create surface ellipse vertex 132 134 73')
cubit.cmd('sweep surface 14 along curve 4')

#=============================================================
#Deletion of remaining free vertices, curves and bodies 
#=============================================================

cubit.cmd('delete vertex 50 20 53 52 69 36 81 65 54 67 17 22 63 70 16 42 12 93 10 2 37 84 85 43 31 6 71 \
13 55 78 95 9 90 56 57 15 94 66 83 44 3 8 79 76 39 5 19 27 35 18 47 7 92 21 62 82 4 64 88 68 89 80 \
23 14 33 41 26 38 59 75 34 74 91 77 11 60 58 86 87 32 61 30 51 40 29 28 46 45')
cubit.cmd('delete curve 1 3 36 9 19 27 10 2 4 28 37 18')
cubit.cmd('delete body 7 3 5 1')

#=============================================================
#Create matrix and imprint and merge fibres and matrix to create common surfaces
#=============================================================

str1='brick x '+str(L_RVE)+' y '+str(H_RVE)+' z '+str(W_RVE); cubit.cmd(str1) 
str1='move Volume '+str(9)+' x '+str(0)+' y '+str(0)+' z '+str(s_wraf/2); cubit.cmd(str1) 

cubit.cmd('intersect volume all keep') 
cubit.cmd('delete volume 6 2 8 4') 
cubit.cmd('subtract volume 10 11 12 13 from volume 9 keep') 
cubit.cmd('delete volume 9') 
cubit.cmd('imprint volume 10 11 12 13 14')   
cubit.cmd('merge volume 10 11 12 13 14') 
 
#=============================================================
#Meshing negative x, y and z face of RVE and coping the same to its positive faces
#=============================================================

cubit.cmd('group 1 add surface 42 27 24') 
cubit.cmd('group "g2" add surface 44 25 28') 
cubit.cmd('group "g3" add surface 39 30 33') 
cubit.cmd('group "g4" add surface 31 40 34') 
cubit.cmd('group "g5" add surface 43') 
cubit.cmd('group "g6" add surface 41') 

cubit.cmd('surface 42 27 24 size auto factor 6')       
cubit.cmd('surface 42 27 24 scheme trimesh')      
cubit.cmd('mesh surface 42 27 24')      
cubit.cmd('surface 28 25 44 scheme mirror source surface 27 24 42 source vertex 167 target vertex 166 nosmoothing')  
cubit.cmd('mesh surface 28 25 44')  

cubit.cmd('surface 39 30 33 size auto factor 5')   
cubit.cmd('surface 39 30 33 scheme trimesh')   
cubit.cmd('mesh surface 39 30 33')   
cubit.cmd('surface 31 34 40 scheme mirror source surface 30 33 39 source vertex 161 target vertex 166 nosmoothing')
cubit.cmd('mesh surface 31 34 40')

cubit.cmd('surface 43 scheme trimesh')   
cubit.cmd('mesh surface 43')   
cubit.cmd('surface 41 scheme mirror source surface 43 source vertex 165 target vertex 166 nosmoothing')
cubit.cmd('mesh surface 41')

#=============================================================
#Mesh volume
#=============================================================

cubit.cmd('volume all scheme Tetmesh')
cubit.cmd('mesh volume all')

#=============================================================
#Defining blocks for elastic, transversely-isotropic and potential flow problems 
#=============================================================

vol=['14', '10,11,12,13','10', '11', '12', '13'] 
mat=['MAT_ELASTIC_1','MAT_TRANSISO_1','PotentialFlow1','PotentialFlow2','PotentialFlow3','PotentialFlow4'] 
for i in range(0, 6): 
    cubit.cmd('set duplicate block elements on') 
    str1='block  ' + str(i+1) +' volume '+vol[i]; cubit.cmd(str1) 
    str1='block  ' + str(i+1) +' name "'+mat[i] + '"'; cubit.cmd(str1) 

#=============================================================
#Material properties for matrix part 
#=============================================================
 
cubit.cmd('block 1 attribute count 2') 
Em=3.5e3; Enu=0.35;  #gig to mega as we used dimension in mm 
Elastic=[str(Em), str(Enu)] 
for i in range(0, 2): 
    str1='block 1 attribute index ' + str(i+1) +' '+Elastic[i]; cubit.cmd(str1) 
 
#=============================================================
#Material properties for fibres 
#=============================================================

cubit.cmd('block 2 attribute count 5') 
Ep=40e3; Ez=230e3; nup=0.26; nupz=0.26; Gzp=24e3;  
 
TransIso=[str(Ep), str(Ez), str(nup), str(nupz), str(Gzp)] 
for i in range(0, 5): 
    str1='block 2 attribute index ' + str(i+1) +' '+TransIso[i]; cubit.cmd(str1) 
 
#=============================================================
#Material properties for interface between fibres and matrix 
#=============================================================

alpha_interf=500
cubit.cmd('set duplicate block elements on') 
str1='block 7 surface 23 26 29 32'; cubit.cmd(str1) 
str1='block 7 name "MAT_INTERF_1"'; cubit.cmd(str1) 
cubit.cmd('block 7 attribute count 4') 
str1='block 7 attribute index 1 '+str(alpha_interf); cubit.cmd(str1)    #now we use 4 parameters for interface 
str1='block 7 attribute index 2 '+str(0.0); cubit.cmd(str1) 
str1='block 7 attribute index 3 '+str(0.0); cubit.cmd(str1) 
str1='block 7 attribute index 4 '+str(0.0); cubit.cmd(str1) 
 
#=============================================================
#Defining interfaces
#=============================================================

Interface=['23', '26','29','32']  
for i in range(0, 4):  
    str1='sideset ' + str(i+1) +' surface '+Interface[i]; cubit.cmd(str1)  
    str1='sideset ' + str(i+1) +' name "interface'+str(i+1); cubit.cmd(str1)  
 
#=============================================================
#Defining pressures for potential flow problem 
#=============================================================

Pres=['24', '25','27','28','30','31','33','34']; count=0 
for i in range(0, 4): 
    str1='create pressure '+str(count+1)+' on surface '+str(Pres[count])+' magnitude 1';  cubit.cmd(str1) 
    str1='create pressure '+str(count+2)+' on surface '+str(Pres[count+1])+' magnitude -1';  cubit.cmd(str1) 
    count=count+2;  
 
#=============================================================
#Defining surfaces for dispacement, traction and periodic boundary conditions 
#=============================================================
 
cubit.cmd('sideset 101 surface 41 31 34 40 42 27 24')  # all -ve boundary surfaces for periodic boundary conditions 
cubit.cmd('sideset 102 surface 43 30 33 39 25 44 28')  # all +ve boundary surfaces  for periodic boundary conditions 
cubit.cmd('sideset 103 surface 41 31 34 40 42 27 24 43 30 33 39 25 44 28')  # all boundary surfaces 

#To check for indiviual side for inserstion of prisms of any problem
#cubit.cmd('sideset 101 surface 42 27 24')
#cubit.cmd('sideset 102 surface 25 44 28') 
#cubit.cmd('sideset 101 surface 41')
#cubit.cmd('sideset 102 surface 43') 
#cubit.cmd('sideset 101 surface 31 34 40') 
#cubit.cmd('sideset 102 surface 30 33 39')  
#cubit.cmd('sideset 101 surface 40') 
#cubit.cmd('sideset 102 surface 39')  

#=============================================================
#Definign zero proessrues for potential flow problem
#=============================================================

cubit.cmd('nodeset 1 node 106, 140, 272, 279')  
cubit.cmd('nodeset 1 name "ZeroPressure"')

#=============================================================
#Saving input RVE file 
#=============================================================

cubit.cmd('save as "/Users/zahur/Desktop/RVE_Meshes/Trans_RVE/RVE.cub" overwrite')



























