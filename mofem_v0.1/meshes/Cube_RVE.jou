#!python
#To create RVE for all the three type of boundary conditions, i.e. (Linear dispacemet, traction and periodic)

cubit.cmd('new')
cubit.cmd('brick x 1 y 1 z 1')
interval=2; 

str1='block 1 ' +' volume 1'; cubit.cmd(str1)
str1='block 1 ' +' name "MAT_ELASTIC"'; cubit.cmd(str1)
cubit.cmd('block 1 attribute count 2')
Elastic=['200', '0.3']
for i in range(0, 2):
    str1='block 1 attribute index ' + str(i+1) +' '+Elastic[i]; cubit.cmd(str1)

str1='surface 4 interval '+str(interval); cubit.cmd(str1)
cubit.cmd('surface 4 scheme trimesh')
cubit.cmd('mesh surface 4')
cubit.cmd('surface 6 scheme copy source surface 4 source vertex 4 target vertex 1 source curve 9 target curve 10 nosmoothing')
cubit.cmd('mesh surface 6')

str1='surface 1 interval '+str(interval); cubit.cmd(str1)
cubit.cmd('surface 1 scheme trimesh')
cubit.cmd('mesh surface 1')
cubit.cmd('surface 2 scheme copy source surface 1 source vertex 4 target vertex 7 source curve 3 target curve 7 nosmoothing')
cubit.cmd('mesh surface 2')

str1='surface 3 interval '+str(interval); cubit.cmd(str1)
cubit.cmd('surface 3 scheme trimesh')
cubit.cmd('mesh surface 3')
cubit.cmd('surface 5 scheme copy source surface 3 source vertex 7 target vertex 8 source curve 9 target curve 11 nosmoothing')
cubit.cmd('mesh surface 5')

cubit.cmd('volume 1 scheme tetmesh')
cubit.cmd('mesh volume 1')

cubit.cmd('sideset 101 surface 2 3 4')  # all -ve boundary surfaces
cubit.cmd('sideset 102 surface 1 5 6')  # all +ve boundary surfaces
cubit.cmd('sideset 103 surface 1 2 3 4 5 6')  # all boundary surfaces

cubit.cmd('save as "/Users/zahur/Desktop/RVE_Meshes/Cube_RVE/Cube_RVE.cub" overwrite')








































